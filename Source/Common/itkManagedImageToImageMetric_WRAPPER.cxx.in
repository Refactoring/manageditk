/*=============================================================================

  NOTE: THIS FILE WAS AUTOMATICALLY GENERATED BY THE ManagedITK PROJECT.

  Project:   ManagedITK
  Program:   Insight Segmentation & Registration Toolkit
  Module:    itkManaged@MANAGED_BASE_NAME@.cxx
  Language:  C++/CLI
  Author:    Dan Mueller
  Date:      $Date: 2008-06-21 09:20:09 +0200 (Sat, 21 Jun 2008) $
  Revision:  $Revision: 18 $

  Portions of this code are covered under the ITK and VTK copyright.
  See http://www.itk.org/HTML/Copyright.htm for details.
  See http://www.vtk.org/copyright.php for details.

  Copyright (c) 2007-2008 Daniel Mueller

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  THE SOFTWARE.
  
=============================================================================*/

#pragma once
#pragma warning( disable : 4635 ) // Disable warnings about XML doc comments

#ifndef __itkManaged@MANAGED_BASE_NAME@_cxx
#define __itkManaged@MANAGED_BASE_NAME@_cxx

// Use some managed namespaces
#using <mscorlib.dll>
#using <System.dll>
#using <@MANAGED_ITK_ASSEMBLY_PREFIX@.Common.dll>
using namespace System;
using namespace System::IO;
using namespace System::Reflection;
using namespace System::ComponentModel;
using namespace System::Diagnostics;

namespace itk
{
    
///<summary>
///This class is a managed interface for @NAMESPACE@::@MANAGED_BASE_NAME@.
///</summary>
///<remarks>
///Both the wrapper and type classes derive from this interface.
///</remarks>
public interface class I@MANAGED_BASE_NAME@
{
    @MANAGED_PROPERTIES_INTERFACE@
    @MANAGED_METHODS_INTERFACE@
};

///<summary>
///This class is a managed wrapper for itk::@MANAGED_BASE_NAME@.
///</summary>
///<remarks>
///The actual type instance can be specified by calling the New()
///method with the desired output image type.
///</remarks>
public ref class itk@MANAGED_BASE_NAME@ 
    : itk::itkImageToImageMetric, I@MANAGED_BASE_NAME@
{
private:
    itkImageToImageMetric^ m_Instance;

protected:
    ///<summary>Protected constructor.</summary>
	itk@MANAGED_BASE_NAME@ ( ) : itkImageToImageMetric( )
    { }

public:
    ///<summary>Dispose of the managed object.</summary>
    ~itk@MANAGED_BASE_NAME@ ( )
    {
		if (!this->IsDisposed)
		{
            this->m_IsDisposed = true;
            delete m_Instance;
        }
    }
    
    ///<summary>Finalize the managed object.</summary>
    !itk@MANAGED_BASE_NAME@ ( )
    {
        if (!this->IsDisposed && this->DisposeNativeObjectOnFinalize)
            delete this;
    }
    
	///<summary>
	///Gets/sets if the underlying native object should be disposed when the managed object is finalized.
	///The default is true.
	///</summary>
	property bool DisposeNativeObjectOnFinalize
	{
        virtual bool get() override
        {
            if ( this->m_Instance == nullptr ) return true;
            else return this->m_Instance->DisposeNativeObjectOnFinalize;
        }
        virtual void set( bool value ) override
        { 
            if ( this->m_Instance != nullptr )
                this->m_Instance->DisposeNativeObjectOnFinalize = value;			
        }
	}
    
	///<summary>
	///Get/set the pointer to the native ITK object associated with
	///this wrapper instance.
	///</summary>
	///<returns>The pointer to the native ITK object.</returns>
	property IntPtr NativePointer
    {
        virtual IntPtr get() override { return IntPtr(this->m_Instance->NativePointer); }
        virtual void set ( IntPtr value ) override { this->m_Instance->NativePointer = value; }
    }
    
	///<summary>Get the last modified time.</summary>
	property unsigned long MTime 
	{ 
		virtual unsigned long get() override { return this->m_Instance->MTime; } 
	}

    ///<summary>Create a specific type instance using the given types.</summary>
    ///<param name="types">An array of types specifying which instance to create.</param>
    static itk@MANAGED_BASE_NAME@^ New ( ... array<INativePointer^>^ types )
    {
        // Check that types is valid
        if ( types == nullptr || types->Length == 0 )
			throw gcnew itkInvalidWrappedTypeException("The given types array is invalid. A non-empty, valid types array must be specified to create an instance of a wrapped itk::@MANAGED_BASE_NAME@.");

        // Create the MangledTypeString for the specified explicit instance
        String^ mangledType = String::Empty;
        for each ( INativePointer^ type in types )
            mangledType += type->MangledTypeString;

        return itk@MANAGED_BASE_NAME@::New( mangledType );
    }

    ///<summary>Create a specific type instance using the given types.</summary>
    ///<param name="mangledType">A string specifying which instance type to create. Eg. "IUC2D", "IF3D", etc.</param>
    static itk@MANAGED_BASE_NAME@^ New ( String^ mangledType )
    {
        // Create a new managed object
        itk@MANAGED_BASE_NAME@^ newManagedObject = gcnew itk@MANAGED_BASE_NAME@();
        newManagedObject->m_MangledTypeString = mangledType;
    	
        // Get the name of the instance type to create
        String^ nameInstanceType = "itk.itk@MANAGED_BASE_NAME@_" + newManagedObject->MangledTypeString;

		try
		{
            // Create the correct instance class
			Type^ typeInstance = Assembly::GetExecutingAssembly()->GetType(nameInstanceType);
			if (typeInstance == nullptr)
			    throw gcnew NullReferenceException("The type '" + nameInstanceType + "' could not be found in " + Assembly::GetExecutingAssembly()->GetName() );
			Object^ objInstance = typeInstance->InvokeMember("New", BindingFlags::InvokeMethod, Type::DefaultBinder, nullptr, nullptr);
			if (objInstance == nullptr)
			    throw gcnew NullReferenceException("Could not invoke the New() method for '" + nameInstanceType + "'.");
            newManagedObject->m_Instance = safe_cast<itkImageToImageMetric^>(objInstance);
            
    		// Pass events from type to wrapper
			newManagedObject->PassEventsFromTypeToWrapper( );

        	// Return
        	return newManagedObject;
        }
		catch (Exception^ ex)
		{
			throw gcnew itkInvalidWrappedTypeException("Could not create an instance of '" + nameInstanceType + "'. The given type may not be supported or may be invalid.", ex);
		}
    }
    
    ///<summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
	virtual String^ ToString ( ) override
	{
        return m_Instance->ToString( );
	}
    
    ///<summary>
    ///Remove all observers watching this object.
    ///</summary>
    ///<remarks>
	///By default, observers are created for all events. Calling this
	///method removes all native observers, and therefore prevents
	///the firing of managed events. Call AddAnyEventObserver() to
	///reset the default observers which enable the managed events.
	///</remarks>
	virtual void RemoveAllObservers ( ) override
	{
		this->m_Instance->RemoveAllObservers();
	}

    ///<summary>
    ///Adds a native observer watching for any event.
    ///</summary>
    ///<remarks>
	///By default, observers are created for all events. Calling this
	///method adds a single native observer for any event. This
	///observer invokes the managed events. Therefore, calling this
	///method more than once, or calling it without first calling
	///RemoveAllObservers(), may cause the managed events to be
	///invoked more than once.
	///</remarks>
	virtual void AddAnyEventObserver ( ) override
	{
        this->m_Instance->AddAnyEventObserver( );
        this->PassEventsFromTypeToWrapper( );
	}

    ///<summary>Get the number of parameters required to compute the cost function.</summary>
	property unsigned int NumberOfParameters
    { 
		virtual unsigned int get() override { return m_Instance->NumberOfParameters; }
	}
	
    ///<summary>Return the value of the cost function corresponding to the specified parameters.</summary>
	virtual double GetValue( itkArray<double>^ parameters ) override
	{
        return m_Instance->GetValue( parameters );
    }

    ///<summary>Return the derivative of the cost function corresponding to the specified parameters.</summary>
	virtual itkArray<double>^ GetDerivative( itkArray<double>^ parameters ) override
	{
        return m_Instance->GetDerivative( parameters );
    }
    
	///<summary>Return the derivative of the cost function corresponding to the specified parameters.</summary>
	//virtual void GetValueAndDerivative( itkArray<double>^ parameters, double value, itkArray<double>^ derivative ) = 0;

    ///<summary>Set the fixed image.</summary>
	virtual void SetFixedImage( itkImageBase^ image ) override
	{
        m_Instance->SetFixedImage( image );
    }
    
    ///<summary>Set the fixed image.</summary>
	virtual void SetFixedImage( IntPtr imagePtr ) override
	{
        m_Instance->SetFixedImage( imagePtr );
    }

	///<summary>Get the fixed image.</summary>
    ///<param name="image">The itkImageBase to become the fixed image.</param>
	virtual void GetFixedImage( itkImageBase^ image ) override
	{
        m_Instance->GetFixedImage( image );
    }

	///<summary>Set the moving image.</summary>
	virtual void SetMovingImage( itkImageBase^ image ) override
	{
        m_Instance->SetMovingImage( image );
    }
    
    ///<summary>Set the moving image.</summary>
	virtual void SetMovingImage( IntPtr imagePtr ) override
	{
        m_Instance->SetMovingImage( imagePtr );
    }

	///<summary>Get the moving image.</summary>
    ///<param name="image">The itkImageBase to become the moving image.</param>
	virtual void GetMovingImage( itkImageBase^ image ) override
	{
        m_Instance->GetMovingImage( image );
    }

	///<summary>Set the transform.</summary>
	virtual void SetTransform( itkTransform^ transform ) override
	{
        m_Instance->SetTransform( transform );
    }

	///<summary>Get the transform.</summary>
    ///<param name="transform">The itkTransform to become the transform.</param>
	virtual void GetTransform( itkTransform^ transform ) override
	{
        m_Instance->GetTransform( transform );
    }

	///<summary>Set the interpolator.</summary>
	virtual void SetInterpolator( itkImageFunction^ interpolator ) override
	{
        m_Instance->SetInterpolator( interpolator );
    }

	///<summary>Get the interpolator.</summary>
    ///<param name="interpolator">The itkImageFuction to become the interpolator.</param>
	virtual void GetInterpolator( itkImageFunction^ interpolator ) override
	{
        m_Instance->GetInterpolator( interpolator );
    }

	///<summary>Get the number of pixels considered in the computation.</summary>
	property unsigned int NumberOfPixelsCounted 
	{ 
		virtual unsigned int get() override { return m_Instance->NumberOfPixelsCounted; }
	}

	///<summary>Get/set whether the gradient should be computed or not.</summary>
	property bool ComputeGradient 
	{ 
		virtual bool get() override { return m_Instance->ComputeGradient; }
		virtual void set( bool value ) override { m_Instance->ComputeGradient = value; }
	}

	///<summary>Get the gradient image.</summary>
    ///<param name="image">The itkImageBase to become the gradient image.</param>
	virtual void GetGradientImage( itkImageBase^ image ) override
	{
        m_Instance->GetGradientImage( image );
    }

	///<summary>Set the parameters defining the Transform.</summary>
	virtual void SetTransformParameters( itkArray<double>^ parameters ) override
	{
        m_Instance->SetTransformParameters( parameters );
    }

	///<summary>
	///Initialize the Metric by making sure that all the components are present
	///and plugged together correctly.
	///</summary>
	virtual void Initialize( ) override
	{
        m_Instance->Initialize();
    }
    @MANAGED_PROPERTIES_WRAPPER@ @MANAGED_METHODS_WRAPPER@

private:
    ///<summary>Pass managed events from the type instance to this wrapper instance.</summary>
	void PassEventsFromTypeToWrapper()
	{
        this->m_Instance->Started += gcnew itkEventHandler(this, &itk@MANAGED_BASE_NAME@::Instance_StartedHandler);
		this->m_Instance->Ended += gcnew itkEventHandler(this, &itk@MANAGED_BASE_NAME@::Instance_EndedHandler);
		this->m_Instance->Aborted += gcnew itkEventHandler(this, &itk@MANAGED_BASE_NAME@::Instance_AbortedHandler);
		this->m_Instance->Iteration += gcnew itkEventHandler(this, &itk@MANAGED_BASE_NAME@::Instance_IterationHandler);
		this->m_Instance->Modified += gcnew itkEventHandler(this, &itk@MANAGED_BASE_NAME@::Instance_ModifiedHandler);
	}

	///<summary>Handle the Started event.</summary>
	void Instance_StartedHandler(itkObject^ sender, itkEventArgs^ e)
	{
		this->InvokeStartedEvent(e);
	}

    ///<summary>Handle the Ended event.</summary>
	void Instance_EndedHandler(itkObject^ sender, itkEventArgs^ e)
	{
		this->InvokeEndedEvent(e);
	}
	
    ///<summary>Handle the Aborted event.</summary>
	void Instance_AbortedHandler(itkObject^ sender, itkEventArgs^ e)
	{
		this->InvokeAbortedEvent(e);
	}

    ///<summary>Handle the Iteration event.</summary>
	void Instance_IterationHandler(itkObject^ sender, itkEventArgs^ e)
	{
		this->InvokeIterationEvent(e);
	}

    ///<summary>Handle the Modified event.</summary>
	void Instance_ModifiedHandler(itkObject^ sender, itkEventArgs^ e)
	{
		this->InvokeModifiedEvent(e);
	}

}; // end ref class

} // end namespace itk

#endif