/*=============================================================================

  NOTE: THIS FILE WAS AUTOMATICALLY GENERATED BY THE ManagedITK PROJECT.

  Project:   ManagedITK
  Program:   Insight Segmentation & Registration Toolkit
  Module:    itkManaged@MANAGED_BASE_NAME@_@MANGLED_SUFFIX@.cxx
  Language:  C++/CLI
  Author:    Dan Mueller
  Date:      $Date: 2008-06-21 09:20:09 +0200 (Sat, 21 Jun 2008) $
  Revision:  $Revision: 18 $

  Portions of this code are covered under the ITK and VTK copyright.
  See http://www.itk.org/HTML/Copyright.htm for details.
  See http://www.vtk.org/copyright.php for details.

  Copyright (c) 2007-2008 Daniel Mueller

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  THE SOFTWARE.
  
=============================================================================*/

#pragma once
#pragma warning( disable : 4635 ) // Disable warnings about XML doc comments

#ifndef __itkManaged@MANAGED_BASE_NAME@_@MANGLED_SUFFIX@_cxx
#define __itkManaged@MANAGED_BASE_NAME@_@MANGLED_SUFFIX@_cxx

// Include some useful ITK headers
#pragma unmanaged
#include "itkPath.h"
#include "itkExceptionObject.h"
@MANAGED_INCLUDE_TYPE@

// Include some useful ManagedITK files
#pragma managed
#include "itkManagedTypes.cxx"
#include "itkManagedObjectAutoPtr.cxx"
#include "itkManagedObjectCommand.cxx"
#include "itkManaged@MANAGED_BASE_NAME@.cxx"

// Use some managed namespaces
#using <mscorlib.dll>
#using <System.dll>
#using <@MANAGED_ITK_ASSEMBLY_PREFIX@.Common.dll>
using namespace System;
using namespace System::IO;
using namespace System::Reflection;
using namespace System::ComponentModel;
using namespace System::Diagnostics;

// Some other necessary includes
namespace itk
{

///<summary>
///This class is a managed type instance for itk::@MANAGED_BASE_NAME@ .
///</summary>
public ref class itk@MANAGED_BASE_NAME@_@MANGLED_SUFFIX@ :
    itkParametricPath, I@MANAGED_BASE_NAME@
{
private:
    // Native Type
    typedef @MANAGED_CLASS@ < @TEMPLATE_PARAMS@ > NativeType;
    itkObjectAutoPtr<NativeType> m_PointerToNative;

protected:
    ///<summary>Protected constructor.</summary>
    itk@MANAGED_BASE_NAME@_@MANGLED_SUFFIX@ ( ) : itkParametricPath( )
    {
        this->m_PointerToNative.Reset();
        this->m_MangledTypeString = "PLPP@MANGLED_SUFFIX@";
    }

public:
    ///<summary>Dispose of the managed object.</summary>
    ~itk@MANAGED_BASE_NAME@_@MANGLED_SUFFIX@ ( )
    {
        if (!this->IsDisposed)
        {
            this->m_IsDisposed = true;
            this->m_PointerToNative.Reset();
        }
    }
    
    ///<summary>Finalize the managed object.</summary>
    !itk@MANAGED_BASE_NAME@_@MANGLED_SUFFIX@ ( )
    {
        if (!this->IsDisposed && this->DisposeNativeObjectOnFinalize)
            delete this;
    }

    ///<summary>
    ///Get/set the pointer to the native ITK object associated with this wrapper instance.
    ///</summary>
    ///<returns>The pointer to the native ITK object.</returns>
    property IntPtr NativePointer
    {
        virtual IntPtr get() override { return IntPtr(this->m_PointerToNative.Get()); }
        virtual void set ( IntPtr value ) override 
        {
            this->m_PointerToNative.Reset( (NativeType*)value.ToPointer() );
        }
    }
    
    ///<summary>Get the last modified time.</summary>
    property unsigned long MTime 
    { 
        virtual unsigned long get() override { return this->m_PointerToNative->GetMTime(); }
    }

    ///<summary>Create an instance of the underlying native itk object.</summary>
    static itk@MANAGED_BASE_NAME@_@MANGLED_SUFFIX@^ New ( )
    {
        try
        {
            // Create a new managed object
            itk@MANAGED_BASE_NAME@_@MANGLED_SUFFIX@^ newManagedObject = gcnew itk@MANAGED_BASE_NAME@_@MANGLED_SUFFIX@();
    
            // Create a new native object
            NativeType::Pointer nativeObject = NativeType::New();
            newManagedObject->m_PointerToNative.Reset( nativeObject );
            
            // Add AnyEvent observer
            newManagedObject->AddAnyEventObserver();

            // Return
            return newManagedObject;
        }
        catch ( itk::ExceptionObject& ex )
        {
            throw gcnew itkExceptionObject( ex.GetDescription(), ex.GetLocation(), ex.GetFile(), ex.GetLine() );
        }
    }
    
    ///<summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
    virtual String^ ToString ( ) override
    {
        std::stringstream ss;
        m_PointerToNative->Print( ss );
        std::string s = ss.str();
        return gcnew String( s.c_str() );
    }

    ///<summary>
    ///Remove all observers watching this object.
    ///</summary>
    ///<remarks>
    ///By default, observers are created for all events. Calling this
    ///method removes all native observers, and therefore prevents
    ///the firing of managed events. Call AddAnyEventObserver() to
    ///reset the default observers which enable the managed events.
    ///</remarks>
    virtual void RemoveAllObservers ( ) override
    {
        this->m_PointerToNative->RemoveAllObservers();
    }

    ///<summary>
    ///Adds a native observer watching for any event.
    ///</summary>
    ///<remarks>
    ///By default, observers are created for all events. Calling this
    ///method adds a single native observer for any event. This
    ///observer invokes the managed events. Therefore, calling this
    ///method more than once, or calling it without first calling
    ///RemoveAllObservers(), may cause the managed events to be
    ///invoked more than once.
    ///</remarks>
    virtual void AddAnyEventObserver ( ) override
    {
        itk::itkObjectCommand::Pointer observer = itk::itkObjectCommand::New();
        observer->SetManagedObject( this );
        this->m_PointerToNative->AddObserver( itk::AnyEvent(), observer );
    }
    
    ///<summary>Separate this path from the pipeline.</summary>
    ///<remarks>
    ///This method disconnects the path from the upstream pipeline.
    ///Hence an Update() from downstream will not propagate back past this path.
    ///To completely isolate this path from the pipeline, the application must
    ///remove this path from any filters which it is connected as the input.
    ///</remarks>
    virtual void DisconnectPipeline ( ) override
    {
        try
        {
            this->m_PointerToNative->DisconnectPipeline();
        }
        catch ( itk::ExceptionObject& ex )
        {
            throw gcnew itkExceptionObject( ex.GetDescription(), ex.GetLocation(), ex.GetFile(), ex.GetLine() );
        }
    }
    
    ///<summary>Get the number of dimensions this path contains.</summary>
    property unsigned int Dimension
    { 
        virtual unsigned int get( ) override { return NativeType::PathDimension; }
    }

    ///<summary>
    ///Get/set the start of the path.
    ///For most types of paths, the path will begin at zero.
    ///This value can be overridden in children, and is necessary for
    ///iterators to know how to go to the beginning of a path.
    ///</summary>
    property itkParametricPathInputType StartOfInput
    {
        virtual itkParametricPathInputType get( ) override
        {
            return this->m_PointerToNative->StartOfInput();
        }
    }
    
    ///<summary>
    ///Get/set the end of the path.
    ///This value is sometimes used by IncrementInput() to go to the end of a path.
    ///</summary>
    property itkParametricPathInputType EndOfInput
    {
        virtual itkParametricPathInputType get( ) override
        {
            return this->m_PointerToNative->EndOfInput();
        }
    }

    ///<summary>Evaluate the path at specified location along the path.</summary>
    virtual itkParametricPathOutputType^ Evaluate ( itkParametricPathInputType input ) override
    {
        return itk::ManagedTypes::ToManagedContinuousIndex<NativeType::PathDimension>( this->m_PointerToNative->Evaluate(input) );
    }

    ///<summary>Evaluate the path at specified location along the path.</summary>
    virtual itkIndex^ EvaluateToIndex ( itkParametricPathInputType input ) override
    {
        return itk::ManagedTypes::ToManagedIndex<NativeType::PathDimension>( this->m_PointerToNative->EvaluateToIndex(input) );
    }
    @MANAGED_PROPERTIES_TYPE@ @MANAGED_METHODS_TYPE@

}; // end ref class

} // end namespace itk

#endif