/*=============================================================================

  NOTE: THIS FILE WAS AUTOMATICALLY GENERATED BY THE ManagedITK PROJECT.

  Project:   ManagedITK
  Program:   Insight Segmentation & Registration Toolkit
  Module:    itkManaged@MANAGED_BASE_NAME@_@MANGLED_SUFFIX@.cxx
  Language:  C++/CLI
  Author:    Dan Mueller
  Date:      $Date: 2008-06-21 09:20:09 +0200 (Sat, 21 Jun 2008) $
  Revision:  $Revision: 18 $

  Portions of this code are covered under the ITK and VTK copyright.
  See http://www.itk.org/HTML/Copyright.htm for details.
  See http://www.vtk.org/copyright.php for details.

  Copyright (c) 2007-2008 Daniel Mueller

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  THE SOFTWARE.

=============================================================================*/

#pragma once
#pragma warning( disable : 4635 ) // Disable warnings about XML doc comments

#ifndef __itkManaged@MANAGED_BASE_NAME@_@MANGLED_SUFFIX@_cxx
#define __itkManaged@MANAGED_BASE_NAME@_@MANGLED_SUFFIX@_cxx

// Include some useful ITK headers
#pragma unmanaged
#include "itkDataObject.h"
#include "itkImage.h"
#include "itkExceptionObject.h"
#include "itkSpatialObject.h"
#include "itkSceneSpatialObject.h"
#include "itkGroupSpatialObject.h"
#include "itkBoxSpatialObject.h"
#include "itkEllipseSpatialObject.h"
#include "itkTubeSpatialObject.h"
@MANAGED_INCLUDE_TYPE@

// Include some useful ManagedITK files
#pragma managed
#include "itkManagedTypes.cxx"
#include "itkManagedObjectAutoPtr.cxx"
#include "itkManagedObjectCommand.cxx"
#include "itkManagedProcessObjectCommand.cxx"
#include "itkManagedSpatialObject.cxx"
#include "itkManagedSceneSpatialObject.cxx"
#include "itkManagedGroupSpatialObject.cxx"
#include "itkManagedEllipseSpatialObject.cxx"
#include "itkManagedBoxSpatialObject.cxx"
#include "itkManagedTubeSpatialObject.cxx"
#include "itkManaged@MANAGED_BASE_NAME@.cxx"
@MANAGED_INCLUDE_TYPE_AFTER_PRAGMA_MANAGED@

// Use some managed namespaces
#using <mscorlib.dll>
#using <System.dll>
#using <@MANAGED_ITK_ASSEMBLY_PREFIX@.Common.dll>
#using <@MANAGED_ITK_ASSEMBLY_PREFIX@.Transforms.dll>
using namespace System;
using namespace System::IO;
using namespace System::Reflection;
using namespace System::ComponentModel;
using namespace System::Diagnostics;

// Some other necessary includes
namespace itk
{

///<summary>
///This class is a managed type instance for itk::@MANAGED_BASE_NAME@.
///</summary>
public ref class itk@MANAGED_BASE_NAME@_@MANGLED_SUFFIX@ :
    itkSpatialObjectBase, I@MANAGED_BASE_NAME@
{
private:
    // NativeType
    typedef @MANAGED_CLASS@ < @TEMPLATE_PARAMS@ > NativeType;
    itkObjectAutoPtr<NativeType> m_PointerToNative;

protected:
    ///<summary>Protected constructor.</summary>
    itk@MANAGED_BASE_NAME@_@MANGLED_SUFFIX@ ( ) : itkSpatialObjectBase( )
    {
        this->m_PointerToNative.Reset();
        this->m_IsDisposed = false;
        this->m_MangledTypeString = "@MANGLED_SUFFIX@";
    }

public:
    ///<summary>Dispose of the managed object.</summary>
    ~itk@MANAGED_BASE_NAME@_@MANGLED_SUFFIX@ ( )
    {
        if (!this->IsDisposed)
        {
            this->m_IsDisposed = true;
            this->m_PointerToNative.Reset();
        }
    }

    ///<summary>Finalize the managed object.</summary>
    !itk@MANAGED_BASE_NAME@_@MANGLED_SUFFIX@ ( )
    {
        if (!this->IsDisposed && this->DisposeNativeObjectOnFinalize)
            delete this;
    }

    ///<summary>
    ///Get/set the pointer to the native ITK object associated with
    ///this wrapper instance.
    ///</summary>
    ///<returns>The pointer to the native ITK object.</returns>
    property IntPtr NativePointer
    {
        virtual IntPtr get() override { return IntPtr(this->m_PointerToNative.Get()); }
        virtual void set ( IntPtr value ) override
        {
            this->m_PointerToNative.Reset( (NativeType*)value.ToPointer() );
        }
    }

    ///<summary>Get the last modified time.</summary>
    property unsigned long MTime
    {
        virtual unsigned long get() override { return this->m_PointerToNative->GetMTime(); }
    }

    ///<summary>Get the object dimensions.</summary>
    property unsigned int ObjectDimension
    {
        virtual unsigned int get() override { return this->m_PointerToNative->GetObjectDimension(); }
    }

    ///<summary>Get the SpatialObject type string.</summary>
    property String^ TypeName
    {
        virtual String^ get() override { return gcnew String( this->m_PointerToNative->GetTypeName() ); }
    }

    ///<summary>Get the SpatialObject type string.</summary>
    property String^ SpatialObjectTypeAsString
    {
        virtual String^ get() override { return gcnew String( this->m_PointerToNative->GetSpatialObjectTypeAsString().c_str() ); }
    }

    ///<summary>Get/set the ObjectToWorldTransform.</summary>
    property itkTransform^ ObjectToWorldTransform
    {
        virtual itkTransform^ get() override
        {
            itkScalableAffineTransform^ managed = itkScalableAffineTransform::New( this->ObjectDimension );
            managed->NativePointer = IntPtr(this->m_PointerToNative->GetObjectToWorldTransform());
            return managed;
        }
        virtual void set(itkTransform^ transform) override
        {
            this->m_PointerToNative->SetObjectToWorldTransform(reinterpret_cast<NativeType::TransformType*>(transform->NativePointer.ToPointer()));
        }
    }

    ///<summary>Get/set the ObjectToWorldTransform.</summary>
    property itkTransform^ ObjectToParentTransform
    {
        virtual itkTransform^ get() override
        {
            itkScalableAffineTransform^ managed = itkScalableAffineTransform::New( this->ObjectDimension );
            managed->NativePointer = IntPtr(this->m_PointerToNative->GetObjectToParentTransform());
            return managed;
        }
        virtual void set(itkTransform^ transform) override
        {
            this->m_PointerToNative->SetObjectToParentTransform(reinterpret_cast<NativeType::TransformType*>(transform->NativePointer.ToPointer()));
        }
    }

    ///<summary>
    ///Get/set the region object that defines the size and starting index
    ///for the largest possible region this SpatialObject could represent.
    ///</summary>
    property itkImageRegion^ LargestPossibleRegion
    {
        virtual itkImageRegion^ get() override
        { return itk::ManagedTypes::ToManagedImageRegion<NativeType::ObjectDimension>( m_PointerToNative->GetLargestPossibleRegion() ); }
        virtual void set ( itkImageRegion^ region ) override
        { this->m_PointerToNative->SetLargestPossibleRegion( itk::ManagedTypes::ToNativeImageRegion<NativeType::ObjectDimension>(region) ); }
    }

    ///<summary>
    ///Get/set the region object that defines the size and starting index
    ///for the region of the SpatialObject requested (i.e., the region of the
    ///image to be operated on by a filter). Setting the RequestedRegion
    ///does not cause the object to be modified.
    ///</summary>
    property itkImageRegion^ RequestedRegion
    {
        virtual itkImageRegion^ get() override
        { return itk::ManagedTypes::ToManagedImageRegion<NativeType::ObjectDimension>( m_PointerToNative->GetRequestedRegion() ); }
        virtual void set ( itkImageRegion^ region ) override
        { this->m_PointerToNative->SetRequestedRegion( itk::ManagedTypes::ToNativeImageRegion<NativeType::ObjectDimension>(region) ); }
    }

    ///<summary>
    ///Get/set the region object that defines the size and starting index
    ///of the region of the SpatialObject currently loaded in memory.
    ///</summary>
    property itkImageRegion^ BufferedRegion
    {
        virtual itkImageRegion^ get() override
        { return itk::ManagedTypes::ToManagedImageRegion<NativeType::ObjectDimension>( m_PointerToNative->GetBufferedRegion() ); }
        virtual void set ( itkImageRegion^ region ) override
        { this->m_PointerToNative->SetBufferedRegion( itk::ManagedTypes::ToNativeImageRegion<NativeType::ObjectDimension>(region) ); }
    }

    ///<summary>Get/set the spacing.</summary>
    property itkSpacing^ Spacing
    {
        virtual itkSpacing^ get() override
        {
            itkSpacing^ spacing = gcnew itkSpacing( NativeType::ObjectDimension );
            for ( unsigned int dim=0; dim<NativeType::ObjectDimension; dim++ )
              spacing[dim] = m_PointerToNative->GetSpacing()[dim];
            return spacing;
        }
        virtual void set( itkSpacing^ spacing ) override
        {
            double unmanaged[NativeType::ObjectDimension];
            for ( unsigned int dim=0; dim<NativeType::ObjectDimension; dim++ )
              unmanaged[dim] = spacing[dim];
            m_PointerToNative->SetSpacing( unmanaged );
        }
    }

    ///<summary>Create an instance of the underlying native itk object.</summary>
    static itk@MANAGED_BASE_NAME@_@MANGLED_SUFFIX@^ New ( )
    {
        try
        {
            // Create a new managed object
            itk@MANAGED_BASE_NAME@_@MANGLED_SUFFIX@^ newManagedObject = gcnew itk@MANAGED_BASE_NAME@_@MANGLED_SUFFIX@();

            // Create a new native object
            NativeType::Pointer nativeObject = NativeType::New();
            newManagedObject->m_PointerToNative.Reset( nativeObject );

            // Add AnyEvent observer
            newManagedObject->AddAnyEventObserver();

            // Return
            return newManagedObject;
        }
        catch ( itk::ExceptionObject& ex )
        {
            throw gcnew itkExceptionObject( ex.GetDescription(), ex.GetLocation(), ex.GetFile(), ex.GetLine() );
        }
    }

    ///<summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
    virtual String^ ToString ( ) override
    {
        std::stringstream ss;
        m_PointerToNative->Print( ss );
        std::string s = ss.str();
        return gcnew String( s.c_str() );
    }

    ///<summary>
    ///Remove all observers watching this object.
    ///</summary>
    ///<remarks>
    ///By default, observers are created for all events. Calling this
    ///method removes all native observers, and therefore prevents
    ///the firing of managed events. Call AddAnyEventObserver() to
    ///reset the default observers which enable the managed events.
    ///</remarks>
    virtual void RemoveAllObservers ( ) override
    {
        this->m_PointerToNative->RemoveAllObservers();
    }

    ///<summary>
    ///Adds a native observer watching for any event.
    ///</summary>
    ///<remarks>
    ///By default, observers are created for all events. Calling this
    ///method adds a single native observer for any event. This
    ///observer invokes the managed events. Therefore, calling this
    ///method more than once, or calling it without first calling
    ///RemoveAllObservers(), may cause the managed events to be
    ///invoked more than once.
    ///</remarks>
    virtual void AddAnyEventObserver ( ) override
    {
        itk::itkObjectCommand::Pointer observer = itk::itkObjectCommand::New();
        observer->SetManagedObject( this );
        this->m_PointerToNative->AddObserver( itk::AnyEvent(), observer );
    }

    ///<summary>Separate this object from the pipeline.</summary>
    ///<remarks>
    ///This method disconnects the object from the upstream pipeline.
    ///Hence an Update() from downstream will not propagate back past this object.
    ///To completely isolate this object from the pipeline, the application must
    ///remove this object from any filters which it is connected as the input.
    ///</remarks>
    virtual void DisconnectPipeline ( ) override
    {
        this->m_PointerToNative->DisconnectPipeline();
    }

    ///<summary>
    ///Compute the World transform when the local transform is set
    ///This function should be called each time the local transform
    ///has been modified.
    ///</summary>
    virtual void ComputeObjectToWorldTransform ( ) override
    {
        this->m_PointerToNative->ComputeObjectToWorldTransform();
    }

    ///<summary>
    ///Compute the Local transform when the global transform is set.
    ///</summary>
    virtual void ComputeObjectToParentTransform ( ) override
    {
        this->m_PointerToNative->ComputeObjectToParentTransform();
    }

    ///<summary>
    ///Returns the value at a point.
    ///</summary>
    virtual bool ValueAt ( itkPoint^ point, double & value ) override
    {
        NativeType::PointType pointUnmanaged = itk::ManagedTypes::ToNativePoint<NativeType::ObjectDimension>(point);
        return this->m_PointerToNative->ValueAt( pointUnmanaged, value );
    }

    ///<summary>
    ///Returns true if the object can provide a "meaningful" value at
    ///a point. Often defaults to returning same answer as IsInside, but
    ///certain objects influence space beyond their spatial extent.
    ///</summary>
    virtual bool IsEvaluableAt ( itkPoint^ point ) override
    {
        NativeType::PointType pointUnmanaged = itk::ManagedTypes::ToNativePoint<NativeType::ObjectDimension>(point);
        return this->m_PointerToNative->IsEvaluableAt( pointUnmanaged );
    }

    ///<summary>
    ///Returns true if a point is inside the object.
    ///</summary>
    virtual bool IsInside ( itkPoint^ point ) override
    {
        NativeType::PointType pointUnmanaged = itk::ManagedTypes::ToNativePoint<NativeType::ObjectDimension>(point);
        return this->m_PointerToNative->IsInside( pointUnmanaged );
    }

    ///<summary>
    ///Add an object to the list of children.
    ///</summary>
    virtual void AddSpatialObject ( itkSpatialObjectBase^ object ) override
    {
        return this->m_PointerToNative->AddSpatialObject( reinterpret_cast<NativeType*>(object->NativePointer.ToPointer()) );
    }

    ///<summary>
    ///Remove the object passed as arguments from the list of children.
    ///</summary>
    virtual void RemoveSpatialObject ( itkSpatialObjectBase^ object ) override
    {
        return this->m_PointerToNative->RemoveSpatialObject( reinterpret_cast<NativeType*>(object->NativePointer.ToPointer()) );
    }

    ///<summary>
    ///Set the native pointer of the given object to the parent object in the hierarchy tree.
    ///</summary>
    virtual void GetParent ( itkSpatialObjectBase^ parent ) override
    {
        parent->NativePointer = IntPtr((NativeType*)this->m_PointerToNative->GetParent( ));
    }

    ///<summary>
    ///Clear the spatial object by deleting all lists of children and subchildren.
    ///</summary>
    virtual void Clear ( ) override
    {
        this->m_PointerToNative->Clear( );
    }

    ///<summary>
    ///Return the number of children directly under this SpatialObject.
    ///</summary>
    virtual unsigned int GetNumberOfChildren ( ) override
    {
        return this->m_PointerToNative->GetNumberOfChildren( );
    }

    ///<summary>
    ///Return the number of children under this SpatialObject to the given depth.
    ///</summary>
    virtual unsigned int GetNumberOfChildren ( unsigned int depth ) override
    {
        return this->m_PointerToNative->GetNumberOfChildren( depth );
    }

    ///<summary>
    ///Returns a list of pointer to the children affiliated to this object.
    ///A depth of 0 returns the immediate children. A depth of 1 returns the
    ///children and those children's children.
    ///</summary>
    ///<remarks>
    ///This method steps through the unmanaged list of children and creates a
    ///managed wrapper for each child using the typeid. Currently the supported
    ///types are: Group, Ellipse, Tube, Box.
    ///All unsupported types are wrapped as an itkSpatialObject.
    ///</remarks>
    virtual array<itkSpatialObjectBase^>^ GetChildren ( unsigned int depth ) override
    {
        // Create the array
        unsigned int numChildren = this->m_PointerToNative->GetNumberOfChildren( depth );
        array<itkSpatialObjectBase^>^ result = gcnew array<itkSpatialObjectBase^>( numChildren );
        unsigned int i = 0;

        // Step through unmanaged array
        NativeType::ChildrenListType* children = this->m_PointerToNative->GetChildren( depth );
        NativeType::ChildrenListType::iterator it = children->begin();
        NativeType::ChildrenListType::iterator itEnd = children->end();
        while ( it != itEnd )
        {
            // Check the iterator is a valid pointer
            SpatialObject<NativeType::ObjectDimension>* obj = (*it);
            if ( obj == NULL ) continue;

            // Create explicitly-typed wrapper
            if ( !strncmp(obj->GetTypeName(),"Group",5) )
            {
                result[i] = itkGroupSpatialObject::New( NativeType::ObjectDimension );
                result[i]->DisposeNativeObjectOnFinalize = false;
                result[i]->NativePointer = IntPtr((NativeType*)(obj));
            }
            else if ( !strncmp(obj->GetTypeName(),"Tube",4) )
            {
                result[i] = itkTubeSpatialObject::New( NativeType::ObjectDimension );
                result[i]->DisposeNativeObjectOnFinalize = false;
                result[i]->NativePointer = IntPtr((NativeType*)(obj));
            }
            else if ( !strncmp(obj->GetTypeName(),"Ellipse",7) )
            {
                result[i] = itkEllipseSpatialObject::New( NativeType::ObjectDimension );
                result[i]->DisposeNativeObjectOnFinalize = false;
                result[i]->NativePointer = IntPtr((NativeType*)(obj));
            }
            else if ( !strncmp(obj->GetTypeName(),"Box",3) )
            {
                result[i] = itkBoxSpatialObject::New( NativeType::ObjectDimension );
                result[i]->DisposeNativeObjectOnFinalize = false;
                result[i]->NativePointer = IntPtr((NativeType*)(obj));
            }
            else
            {
                result[i] = itkSpatialObject::New( NativeType::ObjectDimension );
                result[i]->DisposeNativeObjectOnFinalize = false;
                result[i]->NativePointer = IntPtr((NativeType*)(obj));
            }

            // Increment
            i++; it++;
        }

        // Return managed array
        return result;
    }

    @MANAGED_PROPERTIES_TYPE@ @MANAGED_METHODS_TYPE@

}; // end ref class

} // end namespace itk

#endif
