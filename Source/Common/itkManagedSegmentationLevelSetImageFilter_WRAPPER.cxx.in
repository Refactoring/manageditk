/*=============================================================================

  NOTE: THIS FILE WAS AUTOMATICALLY GENERATED BY THE ManagedITK PROJECT.

  Project:   ManagedITK
  Program:   Insight Segmentation & Registration Toolkit
  Module:    itkManaged@MANAGED_BASE_NAME@.cxx
  Language:  C++/CLI
  Author:    Dan Mueller
  Date:      $Date: 2008-06-21 09:20:09 +0200 (Sat, 21 Jun 2008) $
  Revision:  $Revision: 18 $

  Portions of this code are covered under the ITK and VTK copyright.
  See http://www.itk.org/HTML/Copyright.htm for details.
  See http://www.vtk.org/copyright.php for details.

  Copyright (c) 2007-2008 Daniel Mueller

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  THE SOFTWARE.
  
=============================================================================*/

#pragma once
#pragma warning( disable : 4635 ) // Disable warnings about XML doc comments

#ifndef __itkManaged@MANAGED_BASE_NAME@_cxx
#define __itkManaged@MANAGED_BASE_NAME@_cxx

// Use some managed namespaces
#using <mscorlib.dll>
#using <System.dll>
#using <@MANAGED_ITK_ASSEMBLY_PREFIX@.Common.dll>
using namespace System;
using namespace System::IO;
using namespace System::Reflection;
using namespace System::ComponentModel;
using namespace System::Diagnostics;

namespace itk
{

///<summary>
///This class is a managed interface for itk::@MANAGED_BASE_NAME@.
///</summary>
///<remarks>
///Both the wrapper and type classes derive from this interface.
///</remarks>
public interface class I@MANAGED_BASE_NAME@
{
    void SetInput( unsigned int index, IntPtr itkDataObjectPtr );
    void SetInput( IntPtr itkDataObjectPtr );
	IntPtr GetOutput ( unsigned int index );
	IntPtr GetOutput ( );
    void SetInitialImage   ( IntPtr itkDataObjectPtr );
    void SetFeatureImage   ( IntPtr itkDataObjectPtr );
    void SetSpeedImage     ( IntPtr itkDataObjectPtr );
    void SetAdvectionImage ( IntPtr itkDataObjectPtr );
    IntPtr GetFeatureImage  ( );
    IntPtr GetSpeedImage    ( );
    IntPtr GetAdvectionImage( );
    @MANAGED_PROPERTIES_INTERFACE@
    @MANAGED_METHODS_INTERFACE@
};


///<summary>
///This class is a managed wrapper for itk::@MANAGED_BASE_NAME@.
///</summary>
///<remarks>
///The actual type instance can be specified by calling the New()
///method with the desired initial levelset and speed function.
///</remarks>
public ref class itk@MANAGED_BASE_NAME@ :
    itkSegmentationLevelSetImageFilter, I@MANAGED_BASE_NAME@
{
private:
    itkSegmentationLevelSetImageFilter^ m_Instance;

protected:
    ///<summary>Protected constructor.</summary>
	itk@MANAGED_BASE_NAME@ ( ) : itkSegmentationLevelSetImageFilter( "@MANAGED_BASE_NAME@" )
    { }

public:
    ///<summary>Dispose of the managed object.</summary>
    ~itk@MANAGED_BASE_NAME@ ( )
    {
		if (!this->IsDisposed)
		{
            this->m_IsDisposed = true;
            delete m_Instance;
        }
    }
    
    ///<summary>Finalize the managed object.</summary>
    !itk@MANAGED_BASE_NAME@ ( )
    {
        if (!this->IsDisposed && this->DisposeNativeObjectOnFinalize)
            delete this;
    }
    
	///<summary>
	///Gets/sets if the underlying native object should be disposed when the managed object is finalized.
	///The default is true.
	///</summary>
	property bool DisposeNativeObjectOnFinalize
	{
        virtual bool get() override
        {
            if ( this->m_Instance == nullptr ) return true;
            else return this->m_Instance->DisposeNativeObjectOnFinalize;
        }
        virtual void set( bool value ) override
        { 
            if ( this->m_Instance != nullptr )
                this->m_Instance->DisposeNativeObjectOnFinalize = value;			
        }
	}
    
	///<summary>
	///Get/set the pointer to the native ITK object associated with
	///this wrapper instance.
	///</summary>
	///<returns>The pointer to the native ITK object.</returns>
	property IntPtr NativePointer
    {
        virtual IntPtr get() override { return IntPtr(this->m_Instance->NativePointer); }
        virtual void set ( IntPtr value ) override { this->m_Instance->NativePointer = value; }
    }
    
	///<summary>Get the last modified time.</summary>
	property unsigned long MTime 
	{ 
		virtual unsigned long get() override { return this->m_Instance->MTime; } 
	}

    ///<summary>
	///Get the size of the input array. This is merely the size of the input array,
	///not the number of inputs that have valid DataObject's assigned.
	///</summary>
    ///<remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
	property unsigned int NumberOfInputs 
	{ 
		virtual unsigned int get() override { return this->m_Instance->NumberOfInputs; }
	}

    ///<summary>
	///Get the number of valid inputs.  This is the number of non-null entries in the
	///input array in the first NumberOfRequiredInputs slots. This method is used
	///to determine whether the necessary required inputs have been set.
	///</summary>
	property unsigned int NumberOfValidRequiredInputs 
	{ 
		virtual unsigned int get() override { return this->m_Instance->NumberOfValidRequiredInputs; }
	}

    ///<summary>Return the length of the output array.</summary>
	property unsigned int NumberOfOutputs 
	{
		virtual unsigned int get() override { return this->m_Instance->NumberOfOutputs; }
	}
	
    ///<summary>Get/set the number of threads to create when executing.</summary>
	property unsigned int NumberOfThreads
	{
		virtual unsigned int get() override { return this->m_Instance->NumberOfThreads; }
		virtual void set(unsigned int threads) override { this->m_Instance->NumberOfThreads = threads; }
	}

    ///<summary>Create a specific type instance using the given types.</summary>
    ///<param name="types">An array of types specifying which instance to create.</param>
    static itk@MANAGED_BASE_NAME@^ New ( ... array<INativePointer^>^ types )
    {
        // Check that types is valid
        if ( types == nullptr || types->Length == 0 )
			throw gcnew itkInvalidWrappedTypeException("The given types array is invalid. A non-empty, valid types array must be specified to create an instance of a wrapped itk::@MANAGED_BASE_NAME@.");

        // Create the MangledTypeString for the specified explicit instance
        String^ mangledType = String::Empty;
        for each ( INativePointer^ type in types )
            mangledType += type->MangledTypeString;

        return itk@MANAGED_BASE_NAME@::New( mangledType );
    }

    ///<summary>Create a specific type instance using the given types.</summary>
    ///<param name="mangledType">A string specifying which instance type to create. Eg. "IUC2", "IF3", etc.</param>
    static itk@MANAGED_BASE_NAME@^ New ( String^ mangledType )
    {
        // Create a new managed object
        itk@MANAGED_BASE_NAME@^ newManagedObject = gcnew itk@MANAGED_BASE_NAME@();
        newManagedObject->m_MangledTypeString = mangledType;
    	
        // Get the name of the instance type to create
        String^ nameInstanceType = "itk.itk@MANAGED_BASE_NAME@_" + newManagedObject->MangledTypeString;

		try
		{
            // Create the correct instance class
			Type^ typeInstance = Assembly::GetExecutingAssembly()->GetType(nameInstanceType);
			if (typeInstance == nullptr)
			    throw gcnew NullReferenceException("The type '" + nameInstanceType + "' could not be found in " + Assembly::GetExecutingAssembly()->GetName() );
			Object^ objInstance = typeInstance->InvokeMember("New", BindingFlags::InvokeMethod, Type::DefaultBinder, nullptr, nullptr);
			if (objInstance == nullptr)
			    throw gcnew NullReferenceException("Could not invoke the New() method for '" + nameInstanceType + "'.");
            newManagedObject->m_Instance = safe_cast<itkSegmentationLevelSetImageFilter^>(objInstance);

    		// Pass events from type to wrapper
			newManagedObject->PassEventsFromTypeToWrapper( );

        	// Return
        	return newManagedObject;
        }
		catch (Exception^ ex)
		{
			throw gcnew itkInvalidWrappedTypeException("Could not create an instance of '" + nameInstanceType + "'. The given type may not be supported or may be invalid.", ex);
		}
    }
    
    ///<summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
	virtual String^ ToString ( ) override
	{
        return m_Instance->ToString( );
	}

	///<summary>
    ///Remove all observers watching this object.
    ///</summary>
    ///<remarks>
	///By default, observers are created for all events. Calling this
	///method removes all native observers, and therefore prevents
	///the firing of managed events. Call AddAnyEventObserver() to
	///reset the default observers which enable the managed events.
	///</remarks>
	virtual void RemoveAllObservers ( ) override
	{
		this->m_Instance->RemoveAllObservers();
	}

    ///<summary>
    ///Adds a native observer watching for any event.
    ///</summary>
    ///<remarks>
	///By default, observers are created for all events. Calling this
	///method adds a single native observer for any event. This
	///observer invokes the managed events. Therefore, calling this
	///method more than once, or calling it without first calling
	///RemoveAllObservers(), may cause the managed events to be
	///invoked more than once.
	///</remarks>
	virtual void AddAnyEventObserver ( ) override
	{
        this->m_Instance->AddAnyEventObserver( );
        this->PassEventsFromTypeToWrapper( );
	}
	
    ///<summary>
    ///Bring this filter up-to-date.
    ///</summary>
    ///<remarks>
	///Update() checks modified times against last execution times, and
	///re-executes objects if necessary. A side effect of this method
	///ss that the whole pipeline may execute in order to bring this filter
	///up-to-date. This method updates the currently prescribed requested region.
	///If no requested region has been set on the output, then the requested
	///region will be set to the largest possible region. Once the requested
	///region is set, Update() will make sure the specified requested region 
	///is up-to-date. To have a filter always to produce its largest possible
	///region, users should call UpdateLargestPossibleRegion() instead.
	///</remarks>
    virtual void Update ( ) override
    {
        this->m_Instance->Update();
    }
    
    ///<summary>
    ///Bring the largest possible region of this filter up-to-date.
    ///</summary>
    ///<remarks>
	///Like Update(), but sets the output requested region to the
	///largest possible region for the output. This is the method users
	///should call if they want the entire dataset to be processed. If
	///a user wants to update the same output region as a previous call
	///to Update() or a previous call to UpdateLargestPossibleRegion(), 
	///then they should call the method Update().
	///</remarks>
    virtual void UpdateLargestPossibleRegion ( ) override
    {
        this->m_Instance->UpdateLargestPossibleRegion();
    }
    
    ///<summary>
    ///Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
    ///</summary>
    ///<remarks>
	///Process objects may handle premature termination of execution in different ways.
	///Eg. many filters totally ignore this flag.
	///</remarks>
    virtual void AbortGenerateData( ) override
    {
		this->m_Instance->AbortGenerateData();
    }

    ///<summary>Set the specified input of the filter object.</summary>
    ///<param name="input">The input as an itkDataObject.</param>
    virtual void SetInput ( unsigned int index, itkDataObject^ input ) override
    {
        this->m_Instance->SetInput(index, input);
    }

    ///<summary>Set the first input of the filter object.</summary>
    ///<param name="input">The input as an itkDataObject.</param>
    virtual void SetInput ( itkDataObject^ input ) override
    {
        this->m_Instance->SetInput(input);
    }

    ///<summary>Get the specified output of the filter object.</summary>
    ///<param name="output">The itkDataObject to make as the output.</param>
    virtual void GetOutput ( unsigned int index, itkDataObject^ output ) override
    {
        this->m_Instance->GetOutput(index, output);
    }

    ///<summary>Get the first output of the filter object.</summary>
    ///<param name="output">The itkDataObject to make as the output.</param>
    virtual void GetOutput ( itkDataObject^ output ) override
    {
        this->m_Instance->GetOutput(output);
    }
    
    ///<summary>Set the specified input of the filter object.</summary>
    ///<param name="itkDataObjectPtr">The input as an IntPtr.</param>
    virtual void SetInput( unsigned int index, IntPtr itkDataObjectPtr ) override
    {
        this->m_Instance->SetInput(index, itkDataObjectPtr);
    }

    ///<summary>Set the first input of the filter object.</summary>
    ///<param name="itkDataObjectPtr">The input as an IntPtr.</param>
    virtual void SetInput( IntPtr itkDataObjectPtr ) override
    {
        this->m_Instance->SetInput(itkDataObjectPtr);
    }

    ///<summary>Get the specified output of the filter object.</summary>
    ///<returns>The output as an IntPtr.</param>
	virtual IntPtr GetOutput( unsigned int index ) override
	{
        return this->m_Instance->GetOutput(index);
    }
    
    ///<summary>Get the first output of the filter object.</summary>
    ///<returns>The output as an IntPtr.</param>
	virtual IntPtr GetOutput( ) override
	{
        return this->m_Instance->GetOutput();
    }

    ///<summary>
    ///Get the number of elapsed iterations of the filter.
    ///</summary>
    property unsigned int ElapsedIterations 
    {
        virtual unsigned int get() override { return this->m_Instance->ElapsedIterations; }
    }
    
    ///<summary>
    ///Get/set the maximum number of iterations that the filter will run.
    ///</summary>
    property unsigned int NumberOfIterations
    {
        virtual unsigned int get() override { return this->m_Instance->NumberOfIterations; }
        virtual void set( unsigned int value ) override { this->m_Instance->NumberOfIterations = value; }
    }
    
    ///<summary>
    ///Get/set if the image spacing information is used in calculations. 
    ///Use this option if you want derivatives in physical space.
    ///</summary>
    ///<remarks>Default is UseImageSpacingOff (ie. UseImageSpacing=False).</remarks>
    property bool UseImageSpacing 
    {
        virtual bool get() override { return this->m_Instance->UseImageSpacing; }
        virtual void set( bool value ) override { this->m_Instance->UseImageSpacing = value; }
    }

    ///<summary>
    ///Get/set the maximum error allowed in the solution. 
    ///This may not be defined for all solvers and its meaning may change with the application.
    ///</summary>
    property double MaximumRMSError 
    {
        virtual double get() override { return this->m_Instance->MaximumRMSError; }
        virtual void set( double value ) override { this->m_Instance->MaximumRMSError = value; }
    }
    
    ///<summary>
    ///Get/set the root mean squared change of the previous iteration.
    ///May not be used by all solvers.
    ///</summary>
    property double RMSChange 
    {
        virtual double get() override { return this->m_Instance->RMSChange; }
        virtual void set( double value ) override { this->m_Instance->RMSChange = value; }
    }

    ///<summary>
    ///Turn On/Off the flag which determines whether Positive or Negative speed
    ///terms will cause surface expansion. If set to TRUE then negative speed
    ///terms will cause the surface to expand and positive speed terms will cause
    ///the surface to contract. If set to FALSE (default) then positive speed terms
    ///will cause the surface to expand and negative speed terms will cause the
    ///surface to contract. This method can be safely used to reverse the
    ///expansion/contraction as appropriate to a particular application or data set/
    ///</summary>
    property bool ReverseExpansionDirection 
    {
        virtual bool get() override { return this->m_Instance->ReverseExpansionDirection; }
        virtual void set( bool value ) override { this->m_Instance->ReverseExpansionDirection = value; }
    }

    ///<summary>
    ///Turn On/Off automatic generation of Speed and Advection terms when Update
    ///is called. If set to Off, the Speed and Advection images must be set
    ///explicitly using SetSpeedImage, SetAdvectionImage OR the methods
    ///GenerateSpeedImage() and GenerateAdvectionImage() should be called prior
    ///to updating the filter.
    ///</summary>
    property bool AutoGenerateSpeedAdvection 
    {
        virtual bool get() override { return this->m_Instance->AutoGenerateSpeedAdvection; }
        virtual void set( bool value ) override { this->m_Instance->AutoGenerateSpeedAdvection = value; }
    }

    ///<summary>
    ///Set the combined scaling of the propagation and advection speed terms.
    ///You should use either this -or- Get/SetPropagationScaling and
    ///Get/SetAdvectionScaling (if appropriate).  See subclasses for details
    ///on when and whether to set these parameters.
    ///</summary>
    property itkPixel^ FeatureScaling 
    {
        virtual void set( itkPixel^ value ) override { this->m_Instance->FeatureScaling = value; }
    }

    ///<summary>
    ///Get/set the scaling of the propagation speed.
    ///Setting the FeatureScaling parameter overrides any previous values set for PropagationScaling.
    ///</summary>
    property itkPixel^ PropagationScaling 
    {
        virtual itkPixel^ get() override { return this->m_Instance->PropagationScaling; }
        virtual void set( itkPixel^ value ) override { this->m_Instance->PropagationScaling = value; }
    }
    
    ///<summary>
    ///Get/set the scaling of the advection field.
    ///Setting the FeatureScaling parameter will override any existing value for AdvectionScaling.
    ///</summary>
    property itkPixel^ AdvectionScaling 
    {
        virtual itkPixel^ get() override { return this->m_Instance->AdvectionScaling; }
        virtual void set( itkPixel^ value ) override { this->m_Instance->AdvectionScaling = value; }
    }
    
    ///<summary>
    ///Get/set the scaling of the curvature. 
    ///Use this parameter to increase the influence of curvature on the movement of the surface.
    ///Higher values relative to Advection and Propagation values will give smoother surfaces.
    ///</summary>
    property itkPixel^ CurvatureScaling
    {
        virtual itkPixel^ get() override { return this->m_Instance->CurvatureScaling; }
        virtual void set( itkPixel^ value ) override { this->m_Instance->CurvatureScaling = value; }
    }
    
    ///<summary>
    ///No documentation provided in Code/Algorithms/itkSegmentationLevelSetImageFilter.h
    ///</summary>
    property bool UseMinimalCurvature
    {
        virtual bool get() override { return this->m_Instance->UseMinimalCurvature; }
        virtual void set( bool value ) override { this->m_Instance->UseMinimalCurvature = value; }
    }
    
    ///<summary>
    ///Get/set the maximum constraint for the curvature term factor in the time step calculation.
    ///Changing this value from the default is not recommended or necessary but could be used 
    ///to speed up the surface evolution at the risk of creating an unstable solution.
    ///</summary>
    property double MaximumCurvatureTimeStep 
    {
        virtual double get() override { return this->m_Instance->MaximumCurvatureTimeStep; }
        virtual void set( double value ) override { this->m_Instance->MaximumCurvatureTimeStep = value; }
    }
    
    ///<summary>
    ///Get/set the maximum constraint for the scalar/vector term factor of the time step calculation.
    ///Changing this value from the default is not recommended or necessary but could be used to 
    ///speed up the surface evolution at the risk of creating an unstable solution.
    ///</summary>
    property double MaximumPropagationTimeStep 
    {
        virtual double get() override { return this->m_Instance->MaximumPropagationTimeStep; }
        virtual void set( double value ) override { this->m_Instance->MaximumPropagationTimeStep = value; }
    }
    
    // TODO:
    // property XXXX SegmentationFunction { XXXX get(); void set( XXXX value ); }

    ///<summary>Set the initial level set model. Equivalent to calling SetInput(..).</summary>
    virtual void SetInitialImage( itkDataObject^ initialImage ) override
    {
        this->m_Instance->SetInitialImage( initialImage );
    }

    ///<summary>Set the initial level set model. Equivalent to calling SetInput(..).</summary>
    virtual void SetInitialImage ( IntPtr itkDataObjectPtr ) = I@MANAGED_BASE_NAME@::SetInitialImage
    {
        I@MANAGED_BASE_NAME@^ iInstance = safe_cast<I@MANAGED_BASE_NAME@^>(this->m_Instance);
        iInstance->SetInitialImage(itkDataObjectPtr);
    }

    ///<summary>
    ///Set the feature image to be used for speed function of the level set equation.
    ///Equivalent to calling SetInput(1, ..).
    ///</summary>
    virtual void SetFeatureImage( itkDataObject^ featureImage ) override
    {
        this->m_Instance->SetFeatureImage( featureImage );
    }

    ///<summary>
    ///Set the feature image to be used for speed function of the level set equation.
    ///Equivalent to calling SetInput(1, ..).
    ///</summary>
    virtual void SetFeatureImage ( IntPtr itkDataObjectPtr ) = I@MANAGED_BASE_NAME@::SetFeatureImage
    {
        I@MANAGED_BASE_NAME@^ iInstance = safe_cast<I@MANAGED_BASE_NAME@^>(this->m_Instance);
        iInstance->SetFeatureImage(itkDataObjectPtr);
    }

    ///<summary>
    ///Get the feature image to be used for speed function of the level set equation.
    ///Equivalent to calling GetInput(1, ..).
    ///</summary>
    virtual void GetFeatureImage( itkDataObject^ featureImage ) override
    {
        this->m_Instance->GetFeatureImage( featureImage );
    }

    ///<summary>
    ///Get the feature image to be used for speed function of the level set equation.
    ///Equivalent to calling GetInput(1, ..).
    ///</summary>
    virtual IntPtr GetFeatureImage ( ) = I@MANAGED_BASE_NAME@::GetFeatureImage
    {
        I@MANAGED_BASE_NAME@^ iInstance = safe_cast<I@MANAGED_BASE_NAME@^>(this->m_Instance);
        return iInstance->GetFeatureImage();
    }

    ///<summary>
    ///This function is for advanced applications.
    ///Set the image sampled as the speed term of this segmentation method.
    ///In general, the speed image is generated automatically by a subclass of this filter.
    ///</summary>
    virtual void SetSpeedImage ( itkDataObject^ speedImage ) override
    {
        this->m_Instance->SetSpeedImage( speedImage );
    }

    ///<summary>
    ///This function is for advanced applications.
    ///Set the image sampled as the speed term of this segmentation method.
    ///In general, the speed image is generated automatically by a subclass of this filter.
    ///</summary>
    virtual void SetSpeedImage ( IntPtr itkDataObjectPtr ) = I@MANAGED_BASE_NAME@::SetSpeedImage
    {
        I@MANAGED_BASE_NAME@^ iInstance = safe_cast<I@MANAGED_BASE_NAME@^>(this->m_Instance);
        iInstance->SetSpeedImage(itkDataObjectPtr);
    }

    ///<summary>Return the image sampled as the speed term of the segmentation algorithm.</summary>
    virtual void GetSpeedImage ( itkDataObject^ speedImage ) override
    {
        this->m_Instance->GetSpeedImage( speedImage );
    }

    ///<summary>Return the image sampled as the speed term of the segmentation algorithm.</summary>
    virtual IntPtr GetSpeedImage ( ) = I@MANAGED_BASE_NAME@::GetSpeedImage
    {
        I@MANAGED_BASE_NAME@^ iInstance = safe_cast<I@MANAGED_BASE_NAME@^>(this->m_Instance);
        return iInstance->GetSpeedImage();
    }

    ///<summary>
    ///This function is for advanced applications.
    ///Set the image sampled as the advection term of this segmentation method.
    ///In general, the advection image is generated automatically by a subclass of this filter.
    ///</summary>
    virtual void SetAdvectionImage ( itkDataObject^ advectionImage ) override
    {
        this->m_Instance->SetAdvectionImage( advectionImage );
    }

    ///<summary>
    ///This function is for advanced applications.
    ///Set the image sampled as the advection term of this segmentation method.
    ///In general, the advection image is generated automatically by a subclass of this filter.
    ///</summary>
    virtual void SetAdvectionImage ( IntPtr itkDataObjectPtr ) = I@MANAGED_BASE_NAME@::SetAdvectionImage
    {
        I@MANAGED_BASE_NAME@^ iInstance = safe_cast<I@MANAGED_BASE_NAME@^>(this->m_Instance);
        iInstance->SetAdvectionImage(itkDataObjectPtr);
    }

    ///<summary>Return the image sampled as the advection term of the segmentation algorithm.</summary>
    virtual void GetAdvectionImage ( itkDataObject^ advectionImage ) override
    {
        this->m_Instance->GetAdvectionImage( advectionImage );
    }

    ///<summary>Return the image sampled as the advection term of the segmentation algorithm.</summary>
    virtual IntPtr GetAdvectionImage( ) = I@MANAGED_BASE_NAME@::GetAdvectionImage
    {
        I@MANAGED_BASE_NAME@^ iInstance = safe_cast<I@MANAGED_BASE_NAME@^>(this->m_Instance);
        return iInstance->GetAdvectionImage();
    }

    ///<summary>
    ///Allocate and calculate the speed term image in the SegmentationFunction object.
    ///This method is called automatically on filter execution unless 
    ///AutoGenerateSpeedAdvection is set to Off.
    ///</summary>
    virtual void GenerateSpeedImage ( ) override
    {
        this->m_Instance->GenerateSpeedImage( );
    }
    
    ///<summary>
    ///Allocate and calculate the advection term image in the SegmentationFunction object.
    ///This method is called automatically on filter execution unless 
    ///AutoGenerateSpeedAdvection is set to Off.
    ///</summary>
    virtual void GenerateAdvectionImage ( ) override
    {
        this->m_Instance->GenerateSpeedImage( );
    }
    @MANAGED_PROPERTIES_WRAPPER@ @MANAGED_METHODS_WRAPPER@

private:
    ///<summary>Pass managed events from the type instance to this wrapper instance.</summary>
	void PassEventsFromTypeToWrapper()
	{
        this->m_Instance->Started += gcnew itkEventHandler(this, &itk@MANAGED_BASE_NAME@::Instance_StartedHandler);
		this->m_Instance->Ended += gcnew itkEventHandler(this, &itk@MANAGED_BASE_NAME@::Instance_EndedHandler);
		this->m_Instance->Aborted += gcnew itkEventHandler(this, &itk@MANAGED_BASE_NAME@::Instance_AbortedHandler);
		this->m_Instance->Iteration += gcnew itkEventHandler(this, &itk@MANAGED_BASE_NAME@::Instance_IterationHandler);
		this->m_Instance->Modified += gcnew itkEventHandler(this, &itk@MANAGED_BASE_NAME@::Instance_ModifiedHandler);
		this->m_Instance->Progress += gcnew itkProgressHandler(this, &itk@MANAGED_BASE_NAME@::Instance_ProgressHandler);
	}

	///<summary>Handle the Started event.</summary>
	void Instance_StartedHandler(itkObject^ sender, itkEventArgs^ e)
	{
		this->InvokeStartedEvent(e);
	}

    ///<summary>Handle the Ended event.</summary>
	void Instance_EndedHandler(itkObject^ sender, itkEventArgs^ e)
	{
		this->InvokeEndedEvent(e);
	}
	
    ///<summary>Handle the Aborted event.</summary>
	void Instance_AbortedHandler(itkObject^ sender, itkEventArgs^ e)
	{
		this->InvokeAbortedEvent(e);
	}

    ///<summary>Handle the Iteration event.</summary>
	void Instance_IterationHandler(itkObject^ sender, itkEventArgs^ e)
	{
		this->InvokeIterationEvent(e);
	}

    ///<summary>Handle the Modified event.</summary>
	void Instance_ModifiedHandler(itkObject^ sender, itkEventArgs^ e)
	{
		this->InvokeModifiedEvent(e);
	}
	
    ///<summary>Handle the Progress event.</summary>
	void Instance_ProgressHandler(itkProcessObject^ process, itkProgressEventArgs^ e)
	{
		this->InvokeProgressEvent(e);
	}

}; // end ref class

} // end namespace itk

#endif