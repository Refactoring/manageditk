/*=============================================================================

  NOTE: THIS FILE WAS AUTOMATICALLY GENERATED BY THE ManagedITK PROJECT.

  Project:   ManagedITK
  Program:   Insight Segmentation & Registration Toolkit
  Module:    itkManaged@MANAGED_BASE_NAME@.cxx
  Language:  C++/CLI
  Author:    Dan Mueller
  Date:      $Date: 2008-06-21 09:20:09 +0200 (Sat, 21 Jun 2008) $
  Revision:  $Revision: 18 $

  Portions of this code are covered under the ITK and VTK copyright.
  See http://www.itk.org/HTML/Copyright.htm for details.
  See http://www.vtk.org/copyright.php for details.

  Copyright (c) 2007-2008 Daniel Mueller

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  THE SOFTWARE.
  
=============================================================================*/

#pragma once
#pragma warning( disable : 4635 ) // Disable warnings about XML doc comments

#ifndef __itkManaged@MANAGED_BASE_NAME@_cxx
#define __itkManaged@MANAGED_BASE_NAME@_cxx

// Use some managed namespaces
#using <mscorlib.dll>
#using <System.dll>
#using <@MANAGED_ITK_ASSEMBLY_PREFIX@.Common.dll>
using namespace System;
using namespace System::IO;
using namespace System::Reflection;
using namespace System::ComponentModel;
using namespace System::Diagnostics;

namespace itk
{

///<summary>
///This class is a managed interface for itk::@MANAGED_BASE_NAME@.
///</summary>
///<remarks>
///Both the wrapper and type classes derive from this interface.
///</remarks>
public interface class I@MANAGED_BASE_NAME@
{
	property unsigned int ObjectDimension { unsigned int get(); }
	property unsigned int MaximumDepth { unsigned int get(); }
	void AddSpatialObject ( itkSpatialObjectBase^ object );
	void RemoveSpatialObject ( itkSpatialObjectBase^ object );
	void Clear ( );
	unsigned int GetNumberOfObjects ( );
	unsigned int GetNumberOfObjects ( unsigned int depth );
	array<itkSpatialObjectBase^>^ GetObjects ( unsigned int depth );
    @MANAGED_PROPERTIES_INTERFACE@
    @MANAGED_METHODS_INTERFACE@
};


///<summary>
///This class is a managed wrapper for itk::@MANAGED_BASE_NAME@.
///</summary>
///<remarks>
///The actual type instance can be specified by calling the New()
///method with the desired output image type.
///</remarks>
public ref class itk@MANAGED_BASE_NAME@ :
    itkObject, I@MANAGED_BASE_NAME@
{
private:
    itkObject^ m_Instance;
    
protected:
    ///<summary>Protected constructor.</summary>
	itk@MANAGED_BASE_NAME@ ( ) : itkObject( )
    {
        this->m_IsDisposed = false;
    }

public:
    ///<summary>Dispose of the managed object.</summary>
    ~itk@MANAGED_BASE_NAME@ ( )
    {
		if (!this->IsDisposed)
		{
            this->m_IsDisposed = true;
            delete m_Instance;
        }
    }

    ///<summary>Finalize the managed object.</summary>
    !itk@MANAGED_BASE_NAME@ ( )
    {
        if (!this->IsDisposed && this->DisposeNativeObjectOnFinalize)
            delete this;
    }
    
	///<summary>
	///Gets/sets if the underlying native object should be disposed when the managed object is finalized.
	///The default is true.
	///</summary>
	property bool DisposeNativeObjectOnFinalize
	{
		virtual bool get() override { return this->m_Instance->DisposeNativeObjectOnFinalize; }
		virtual void set( bool value ) override { this->m_Instance->DisposeNativeObjectOnFinalize = value; }
	}

	///<summary>
	///Get/set the pointer to the native ITK object associated with
	///this wrapper instance.
	///</summary>
	///<returns>The pointer to the native ITK object.</returns>
	property IntPtr NativePointer
    {
        virtual IntPtr get() override { return IntPtr(this->m_Instance->NativePointer); }
        virtual void set ( IntPtr value ) override { this->m_Instance->NativePointer = value; }
    }
    
	///<summary>Get the last modified time.</summary>
	property unsigned long MTime
	{ 
		virtual unsigned long get() override { return this->m_Instance->MTime; }
	}

	///<summary>Get the object dimensions.</summary>
	property unsigned int ObjectDimension
	{
		virtual unsigned int get()
		{ 
			I@MANAGED_BASE_NAME@^ iInstance = safe_cast<I@MANAGED_BASE_NAME@^>(this->m_Instance);
			return iInstance->ObjectDimension;
		}
	}
	
	///<summary>Get the maximum depth.</summary>
	property unsigned int MaximumDepth
	{
		virtual unsigned int get()
		{
			I@MANAGED_BASE_NAME@^ iInstance = safe_cast<I@MANAGED_BASE_NAME@^>(this->m_Instance);
			return iInstance->MaximumDepth;
		}
	}

    ///<summary>Create a specific type instance using the given types.</summary>
    ///<param name="dim">The dimension of the spatial object.</param>
    static itk@MANAGED_BASE_NAME@^ New ( unsigned int dim )
    {
        return itk@MANAGED_BASE_NAME@::New( dim.ToString() );
    }

    ///<summary>Create a specific type instance using the given types.</summary>
    ///<param name="mangledType">A string specifying which instance type to create. Eg. "IUC2", "IF3", etc.</param>
    static itk@MANAGED_BASE_NAME@^ New ( String^ mangledType )
    {
        // Create a new managed object
        itk@MANAGED_BASE_NAME@^ newManagedObject = gcnew itk@MANAGED_BASE_NAME@();
        newManagedObject->m_MangledTypeString = mangledType;

        // Get the name of the instance type to create
        String^ nameInstanceType = "itk.itk@MANAGED_BASE_NAME@_" + newManagedObject->MangledTypeString;

		try
		{
            // Create the correct instance class
			Type^ typeInstance = Assembly::GetExecutingAssembly()->GetType(nameInstanceType);
			if (typeInstance == nullptr)
			    throw gcnew NullReferenceException("The type '" + nameInstanceType + "' could not be found in " + Assembly::GetExecutingAssembly()->GetName() );
			Object^ objInstance = typeInstance->InvokeMember("New", BindingFlags::InvokeMethod, Type::DefaultBinder, nullptr, nullptr);
			if (objInstance == nullptr)
			    throw gcnew NullReferenceException("Could not invoke the New() method for '" + nameInstanceType + "'.");
            newManagedObject->m_Instance = safe_cast<itkObject^>(objInstance);

    		// Pass events from type to wrapper
			newManagedObject->PassEventsFromTypeToWrapper( );

        	// Return
        	return newManagedObject;
        }
		catch (Exception^ ex)
		{
			throw gcnew itkInvalidWrappedTypeException("Could not create an instance of '" + nameInstanceType + "'. The given type may not be supported or may be invalid.", ex);
		}
    }
    
    ///<summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
	virtual String^ ToString ( ) override
	{
        return m_Instance->ToString( );
	}

    ///<summary>
    ///Remove all observers watching this object.
    ///</summary>
    ///<remarks>
	///By default, observers are created for all events. Calling this
	///method removes all native observers, and therefore prevents
	///the firing of managed events. Call AddAnyEventObserver() to
	///reset the default observers which enable the managed events.
	///</remarks>
	virtual void RemoveAllObservers ( ) override
	{
		this->m_Instance->RemoveAllObservers();
	}

    ///<summary>
    ///Adds a native observer watching for any event.
    ///</summary>
    ///<remarks>
	///By default, observers are created for all events. Calling this
	///method adds a single native observer for any event. This
	///observer invokes the managed events. Therefore, calling this
	///method more than once, or calling it without first calling
	///RemoveAllObservers(), may cause the managed events to be
	///invoked more than once.
	///</remarks>
	virtual void AddAnyEventObserver ( ) override
	{
        this->m_Instance->AddAnyEventObserver( );
        this->PassEventsFromTypeToWrapper( );
	}

	///<summary>
    ///Add an object to the list of children.
    ///</summary>
	virtual void AddSpatialObject ( itkSpatialObjectBase^ object )
	{
		I@MANAGED_BASE_NAME@^ iInstance = safe_cast<I@MANAGED_BASE_NAME@^>(this->m_Instance);
        return iInstance->AddSpatialObject( object );
    }
	
    ///<summary>
    ///Remove the object passed as arguments from the list of children.
    ///</summary>
	virtual void RemoveSpatialObject ( itkSpatialObjectBase^ object )
	{
		I@MANAGED_BASE_NAME@^ iInstance = safe_cast<I@MANAGED_BASE_NAME@^>(this->m_Instance);
        return iInstance->RemoveSpatialObject( object );
    }

	///<summary>
    ///Clear the spatial object by deleting all lists of children and subchildren.
    ///</summary>
	virtual void Clear ( )
	{
		I@MANAGED_BASE_NAME@^ iInstance = safe_cast<I@MANAGED_BASE_NAME@^>(this->m_Instance);
        iInstance->Clear( );
    }
    
	///<summary>
    ///Return the number of objects in the scene.
    ///</summary>
	virtual unsigned int GetNumberOfObjects ( )
	{
		I@MANAGED_BASE_NAME@^ iInstance = safe_cast<I@MANAGED_BASE_NAME@^>(this->m_Instance);
        return iInstance->GetNumberOfObjects( );
    }
	
	///<summary>
    ///Return the number of objects in the scene to the given depth.
    ///</summary>
	virtual unsigned int GetNumberOfObjects ( unsigned int depth )
	{
		I@MANAGED_BASE_NAME@^ iInstance = safe_cast<I@MANAGED_BASE_NAME@^>(this->m_Instance);
        return iInstance->GetNumberOfObjects( depth );
    }

	///<summary>
    ///Returns a list of pointer to the objects affiliated to the scene.
    ///A depth of 0 returns the immediate objects. A depth of 1 returns the
    ///children and those children's children.
    ///</summary>
    ///<remarks>
    ///This method steps through the unmanaged list of objects and creates a
    ///managed wrapper for each object using the typeid. Currently the supported
    ///types are: Group, Ellipse, Tube, Box.
    ///All unsupported types are wrapped as an itkSpatialObject.
    ///</remarks>
	virtual array<itkSpatialObjectBase^>^ GetObjects ( unsigned int depth )
	{
		I@MANAGED_BASE_NAME@^ iInstance = safe_cast<I@MANAGED_BASE_NAME@^>(this->m_Instance);
        return iInstance->GetObjects( depth );
    }

    @MANAGED_PROPERTIES_WRAPPER@ @MANAGED_METHODS_WRAPPER@

private:
    ///<summary>Pass managed events from the type instance to this wrapper instance.</summary>
	void PassEventsFromTypeToWrapper()
	{
        this->m_Instance->Started += gcnew itkEventHandler(this, &itk@MANAGED_BASE_NAME@::Instance_StartedHandler);
		this->m_Instance->Ended += gcnew itkEventHandler(this, &itk@MANAGED_BASE_NAME@::Instance_EndedHandler);
		this->m_Instance->Aborted += gcnew itkEventHandler(this, &itk@MANAGED_BASE_NAME@::Instance_AbortedHandler);
		this->m_Instance->Iteration += gcnew itkEventHandler(this, &itk@MANAGED_BASE_NAME@::Instance_IterationHandler);
		this->m_Instance->Modified += gcnew itkEventHandler(this, &itk@MANAGED_BASE_NAME@::Instance_ModifiedHandler);
	}

	///<summary>Handle the Started event.</summary>
	void Instance_StartedHandler(itkObject^ sender, itkEventArgs^ e)
	{
		this->InvokeStartedEvent(e);
	}

    ///<summary>Handle the Ended event.</summary>
	void Instance_EndedHandler(itkObject^ sender, itkEventArgs^ e)
	{
		this->InvokeEndedEvent(e);
	}
	
    ///<summary>Handle the Aborted event.</summary>
	void Instance_AbortedHandler(itkObject^ sender, itkEventArgs^ e)
	{
		this->InvokeAbortedEvent(e);
	}

    ///<summary>Handle the Iteration event.</summary>
	void Instance_IterationHandler(itkObject^ sender, itkEventArgs^ e)
	{
		this->InvokeIterationEvent(e);
	}

    ///<summary>Handle the Modified event.</summary>
	void Instance_ModifiedHandler(itkObject^ sender, itkEventArgs^ e)
	{
		this->InvokeModifiedEvent(e);
	}

}; // end ref class

} // end namespace itk

#endif