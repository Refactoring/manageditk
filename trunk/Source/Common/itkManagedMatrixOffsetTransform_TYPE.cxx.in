/*=============================================================================

  NOTE: THIS FILE WAS AUTOMATICALLY GENERATED BY THE ManagedITK PROJECT.

  Project:   ManagedITK
  Program:   Insight Segmentation & Registration Toolkit
  Module:    itkManaged@MANAGED_BASE_NAME@_@MANGLED_SUFFIX@.cxx
  Language:  C++/CLI
  Author:    Dan Mueller
  Date:      $Date: 2008-06-21 09:20:09 +0200 (Sat, 21 Jun 2008) $
  Revision:  $Revision: 18 $

  Portions of this code are covered under the ITK and VTK copyright.
  See http://www.itk.org/HTML/Copyright.htm for details.
  See http://www.vtk.org/copyright.php for details.

  Copyright (c) 2007-2008 Daniel Mueller

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  THE SOFTWARE.
  
=============================================================================*/

#pragma once
#pragma warning( disable : 4635 ) // Disable warnings about XML doc comments

#ifndef __itkManaged@MANAGED_BASE_NAME@_@MANGLED_SUFFIX@_cxx
#define __itkManaged@MANAGED_BASE_NAME@_@MANGLED_SUFFIX@_cxx

// Include some useful ITK headers
#pragma unmanaged
#include "itkTransform.h"
#include "itkMatrixOffsetTransformBase.h"
#include "itkExceptionObject.h"
@MANAGED_INCLUDE_TYPE@

// Include some useful ManagedITK files
#pragma managed
#include "itkManagedTypes.cxx"
#include "itkManagedObjectAutoPtr.cxx"
#include "itkManagedObjectCommand.cxx"
#include "itkManaged@MANAGED_BASE_NAME@.cxx"

// Use some managed namespaces
#using <mscorlib.dll>
#using <System.dll>
#using <@MANAGED_ITK_ASSEMBLY_PREFIX@.Common.dll>
using namespace System;
using namespace System::IO;
using namespace System::Reflection;
using namespace System::ComponentModel;
using namespace System::Diagnostics;

// Some other necessary includes
namespace itk
{

///<summary>
///This class is a managed type instance for itk::@MANAGED_BASE_NAME@ .
///</summary>
public ref class itk@MANAGED_BASE_NAME@_@MANGLED_SUFFIX@ :
    itkMatrixOffsetTransform, I@MANAGED_BASE_NAME@
{
private:
    // Native Type
    typedef @MANAGED_CLASS@ < @TEMPLATE_PARAMS@ > NativeType;
    itkObjectAutoPtr<NativeType> m_PointerToNative;

    // Useful typedefs
    typedef NativeType::ParametersType ParametersType;
    typedef NativeType::InputPointType InputPointType;
    typedef NativeType::OutputPointType OutputPointType;
    typedef NativeType::InputVectorType InputVectorType;
    typedef NativeType::OutputVectorType OutputVectorType;
    typedef NativeType::MatrixType MatrixType;
    typedef NativeType::ScalarType ScalarType;

protected:
    ///<summary>Protected constructor.</summary>
    itk@MANAGED_BASE_NAME@_@MANGLED_SUFFIX@ ( ) : itkMatrixOffsetTransform( )
    {
        this->m_PointerToNative.Reset();
        this->m_MangledTypeString = "@MANGLED_SUFFIX@";
    }

public:
    ///<summary>Dispose of the managed object.</summary>
    ~itk@MANAGED_BASE_NAME@_@MANGLED_SUFFIX@ ( )
    {
        if (!this->IsDisposed)
        {
            this->m_IsDisposed = true;
            this->m_PointerToNative.Reset();
        }
    }
    
    ///<summary>Finalize the managed object.</summary>
    !itk@MANAGED_BASE_NAME@_@MANGLED_SUFFIX@ ( )
    {
        if (!this->IsDisposed && this->DisposeNativeObjectOnFinalize)
            delete this;
    }

    ///<summary>
    ///Get/set the pointer to the native ITK object associated with
    ///this wrapper instance.
    ///</summary>
    ///<returns>The pointer to the native ITK object.</returns>
    property IntPtr NativePointer
    {
        virtual IntPtr get() override { return IntPtr(this->m_PointerToNative.Get()); }
        virtual void set ( IntPtr value ) override 
        {
            this->m_PointerToNative.Reset( (NativeType*)value.ToPointer() );
        }
    }
    
    ///<summary>Get the last modified time.</summary>
    property unsigned long MTime 
    { 
        virtual unsigned long get() override { return this->m_PointerToNative->GetMTime(); }
    }

    ///<summary>Create an instance of the underlying native itk object.</summary>
    static itk@MANAGED_BASE_NAME@_@MANGLED_SUFFIX@^ New ( )
    {
        try
        {
            // Create a new managed object
            itk@MANAGED_BASE_NAME@_@MANGLED_SUFFIX@^ newManagedObject = gcnew itk@MANAGED_BASE_NAME@_@MANGLED_SUFFIX@();
    
            // Create a new native object
            NativeType::Pointer nativeObject = NativeType::New();
            newManagedObject->m_PointerToNative.Reset( nativeObject );
            
            // Add AnyEvent observer
            newManagedObject->AddAnyEventObserver();

            // Return
            return newManagedObject;
        }
        catch ( itk::ExceptionObject& ex )
        {
            throw gcnew itkExceptionObject( ex.GetDescription(), ex.GetLocation(), ex.GetFile(), ex.GetLine() );
        }
    }
    
    ///<summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
    virtual String^ ToString ( ) override
    {
        std::stringstream ss;
        m_PointerToNative->Print( ss );
        std::string s = ss.str();
        return gcnew String( s.c_str() );
    }

    ///<summary>
    ///Remove all observers watching this object.
    ///</summary>
    ///<remarks>
    ///By default, observers are created for all events. Calling this
    ///method removes all native observers, and therefore prevents
    ///the firing of managed events. Call AddAnyEventObserver() to
    ///reset the default observers which enable the managed events.
    ///</remarks>
    virtual void RemoveAllObservers ( ) override
    {
        this->m_PointerToNative->RemoveAllObservers();
    }

    ///<summary>
    ///Adds a native observer watching for any event.
    ///</summary>
    ///<remarks>
    ///By default, observers are created for all events. Calling this
    ///method adds a single native observer for any event. This
    ///observer invokes the managed events. Therefore, calling this
    ///method more than once, or calling it without first calling
    ///RemoveAllObservers(), may cause the managed events to be
    ///invoked more than once.
    ///</remarks>
    virtual void AddAnyEventObserver ( ) override
    {
        itk::itkObjectCommand::Pointer observer = itk::itkObjectCommand::New();
        observer->SetManagedObject( this );
        this->m_PointerToNative->AddObserver( itk::AnyEvent(), observer );
    }

    ///<summary>Get the number of parameters that completely define the Transfom.</summary>
    property unsigned int NumberOfParameters
    {
        virtual unsigned int get() override
        {
            return this->m_PointerToNative->GetNumberOfParameters();
        }
    }

    ///<summary>Get/set the transformation parameters.</summary>
    property itkArray<double>^ Parameters
    { 
        virtual itkArray<double>^ get() override
        {
            return itk::ManagedTypes::ToManagedArray<double>( this->m_PointerToNative->GetParameters() );
        }
        virtual void set( itkArray<double>^ parameters ) override
        {
            this->m_PointerToNative->SetParameters( itk::ManagedTypes::ToNativeArray<double>(parameters) );
        }
    }
    
    ///<summary>Return the inverse of the transform.</summary>
    ///<param name="inverse">The managed instance to become the inverse transform.</param>
    ///<returns>True if the inverse exists, false otherwise.</returns>
    virtual bool GetInverse(itkTransform^ inverse) override
    {
        try
        {
            // Get the native inverse
            NativeType::Pointer nativeInverse = NativeType::New();
            bool result = this->m_PointerToNative->GetInverse( nativeInverse );

            if (result)
            {
                // Set the managed inverse to the native inverse
                inverse->NativePointer = IntPtr((NativeType*)nativeInverse);
            }
            
            return result;
        }
        catch ( itk::ExceptionObject& ex )
        {
            throw gcnew itkExceptionObject( ex.GetDescription(), ex.GetLocation(), ex.GetFile(), ex.GetLine() );
        }
    }

    ///<summary>Apply the transform to a point, mapping it from the input to the output space.</summary>
    ///<param name="point">The point to transform.</param>
    ///<returns>A new instance of the transformed point.</returns>
    virtual itkPoint^ TransformPoint( itkPoint^ point ) override
    {
        // Transform point
        InputPointType nativeInputPoint = itk::ManagedTypes::ToNativePoint< NativeType::InputSpaceDimension >(point);
        OutputPointType nativeOutputPoint = m_PointerToNative->TransformPoint( nativeInputPoint );

        // Convert native to managed and return
        return itk::ManagedTypes::ToManagedPoint< NativeType::OutputSpaceDimension >(nativeOutputPoint);
    }

    ///<summary>Apply the transform to a vector, mapping it from the input to the output space.</summary>
    ///<param name="vector">The vector to transform.</param>
    ///<returns>A new instance of the transformed point.</returns>
    virtual itkVector^ TransformVector( itkVector^ vector ) override
    {
        // Transform point
        InputVectorType nativeInputVector = itk::ManagedTypes::ToNativeVector< NativeType::InputSpaceDimension >(vector);
        OutputVectorType nativeOutputVector = m_PointerToNative->TransformVector( nativeInputVector );

        // Convert native to managed and return
        return itk::ManagedTypes::ToManagedVector< NativeType::OutputSpaceDimension >(nativeOutputVector);
    }
    
    ///<summary>Get/set the matrix.</summary>
    ///<remarks>To define an affine transform, you must set the matrix, center, and translation OR the matrix and offset.</remarks>
    property itkMatrix^ Matrix
    {
        virtual itkMatrix^ get() override
        { return itk::ManagedTypes::ToManagedMatrix<MatrixType::ValueType, MatrixType::RowDimensions, MatrixType::ColumnDimensions>( this->m_PointerToNative->GetMatrix() ); }
        virtual void set(itkMatrix^ value) override
        { this->m_PointerToNative->SetMatrix( itk::ManagedTypes::ToNativeMatrix<MatrixType::ValueType, MatrixType::RowDimensions, MatrixType::ColumnDimensions>(value) ); }
    }

    ///<summary>Get/set the offset.</summary>
    ///<remarks>To define an affine transform, you must set the matrix, center, and translation OR the matrix and offset.</remarks>
    property itkVector^ Offset
    {
        virtual itkVector^ get() override
        { return itk::ManagedTypes::ToManagedVector<OutputVectorType::Dimension>( this->m_PointerToNative->GetOffset() ); }
        virtual void set(itkVector^ value) override
        { this->m_PointerToNative->SetOffset( itk::ManagedTypes::ToNativeVector<OutputVectorType::Dimension>(value) ); }
    }

    ///<summary>Get/set the center of rotation.</summary>
    ///<remarks>To define an affine transform, you must set the matrix, center, and translation OR the matrix and offset.</remarks>
    property itkPoint^ Center
    {
        virtual itkPoint^ get() override 
        { return itk::ManagedTypes::ToManagedPoint<InputPointType::PointDimension>( this->m_PointerToNative->GetCenter() ); }
        virtual void set(itkPoint^ value) override
        { this->m_PointerToNative->SetCenter( itk::ManagedTypes::ToNativePoint<InputPointType::PointDimension>(value) ); }
    }

    ///<summary>Get/set the translation.</summary>
    ///<remarks>To define an affine transform, you must set the matrix, center, and translation OR the matrix and offset.</remarks>
    property itkVector^ Translation
    {
        virtual itkVector^ get() override 
        { return itk::ManagedTypes::ToManagedVector<OutputVectorType::Dimension>( this->m_PointerToNative->GetTranslation() ); }
        virtual void set(itkVector^ value) override 
        { this->m_PointerToNative->SetTranslation( itk::ManagedTypes::ToNativeVector<OutputVectorType::Dimension>(value) ); }
    }

    ///<summary>Set the matrix to identity and the offset to zeros.</summary>
    virtual void SetIdentity( ) override 
    {
        this->m_PointerToNative->SetIdentity();
    }
    @MANAGED_PROPERTIES_TYPE@ @MANAGED_METHODS_TYPE@

}; // end ref class

} // end namespace itk

#endif