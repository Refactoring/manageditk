/*=============================================================================

  NOTE: THIS FILE WAS AUTOMATICALLY GENERATED BY THE ManagedITK PROJECT.

  Project:   ManagedITK
  Program:   Insight Segmentation & Registration Toolkit
  Module:    itkManaged@MANAGED_BASE_NAME@_@MANGLED_SUFFIX@.cxx
  Language:  C++/CLI
  Author:    Dan Mueller
  Date:      $Date$
  Revision:  $Revision$

  Portions of this code are covered under the ITK and VTK copyright.
  See http://www.itk.org/HTML/Copyright.htm for details.
  See http://www.vtk.org/copyright.php for details.

  Copyright (c) 2008 Dan Mueller

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  THE SOFTWARE.

=============================================================================*/

#pragma once
#pragma warning( disable : 4635 ) // Disable warnings about XML doc comments

#ifndef __itkManaged@MANAGED_BASE_NAME@_@MANGLED_SUFFIX@_cxx
#define __itkManaged@MANAGED_BASE_NAME@_@MANGLED_SUFFIX@_cxx

// Include some useful ITK headers
#pragma unmanaged
#include "itkExceptionObject.h"
#include "itkVertexCell.h"
#include "itkLineCell.h"
#include "itkTriangleCell.h"
#include "itkQuadrilateralCell.h"
#include "itkPolygonCell.h"
#include "itkTetrahedronCell.h"
#include "itkHexahedronCell.h"
#include "itkQuadraticEdgeCell.h"
#include "itkQuadraticTriangleCell.h"
@MANAGED_INCLUDE_TYPE@

// Include some useful ManagedITK files
#pragma managed
#include "itkManagedTypes.cxx"
#include "itkManagedObjectAutoPtr.cxx"
#include "itkManagedObjectCommand.cxx"
#include "itkManaged@MANAGED_BASE_NAME@.cxx"

// Use some managed namespaces
#using <mscorlib.dll>
#using <System.dll>
#using <@MANAGED_ITK_ASSEMBLY_PREFIX@.Common.dll>
using namespace System;
using namespace System::IO;
using namespace System::Reflection;
using namespace System::ComponentModel;
using namespace System::Diagnostics;

// Some other necessary includes
namespace itk
{

///<summary>
///This class is a managed type instance for itk::@MANAGED_BASE_NAME@.
///</summary>
public ref class itk@MANAGED_BASE_NAME@_@MANGLED_SUFFIX@ :
    itkMeshBase, I@MANAGED_BASE_NAME@
{
private:
    // Native Type
    typedef @MANAGED_CLASS@ < @TEMPLATE_PARAMS@ > NativeType;
    itkObjectAutoPtr<NativeType> m_PointerToNative;

protected:
    ///<summary>Protected constructor.</summary>
    itk@MANAGED_BASE_NAME@_@MANGLED_SUFFIX@ ( ) : itkMeshBase( )
    {
        this->m_PointerToNative.Reset();
        this->m_MangledTypeString = "@MANGLED_PREFIX@@MANGLED_SUFFIX@";
    }

public:
    ///<summary>Dispose of the managed object.</summary>
    ~itk@MANAGED_BASE_NAME@_@MANGLED_SUFFIX@ ( )
    {
        if (!this->IsDisposed)
        {
            this->m_IsDisposed = true;
            this->m_PointerToNative.Reset();
        }
    }

    ///<summary>Finalize the managed object.</summary>
    !itk@MANAGED_BASE_NAME@_@MANGLED_SUFFIX@ ( )
    {
        if (!this->IsDisposed && this->DisposeNativeObjectOnFinalize)
            delete this;
    }

    ///<summary>
    ///Get/set the pointer to the native ITK object associated with this wrapper instance.
    ///</summary>
    ///<returns>The pointer to the native ITK object.</returns>
    property IntPtr NativePointer
    {
        virtual IntPtr get() override { return IntPtr(this->m_PointerToNative.Get()); }
        virtual void set ( IntPtr value ) override
        {
            this->m_PointerToNative.Reset( (NativeType*)value.ToPointer() );
        }
    }

    ///<summary>Get the last modified time.</summary>
    property unsigned long MTime
    {
        virtual unsigned long get() override { return this->m_PointerToNative->GetMTime(); }
    }

    ///<summary>Create an instance of the underlying native itk object.</summary>
    static itk@MANAGED_BASE_NAME@_@MANGLED_SUFFIX@^ New ( )
    {
        try
        {
            // Create a new managed object
            itk@MANAGED_BASE_NAME@_@MANGLED_SUFFIX@^ newManagedObject = gcnew itk@MANAGED_BASE_NAME@_@MANGLED_SUFFIX@();

            // Create a new native object
            NativeType::Pointer nativeObject = NativeType::New();
            newManagedObject->m_PointerToNative.Reset( nativeObject );

            // Add AnyEvent observer
            newManagedObject->AddAnyEventObserver();

            // Return
            return newManagedObject;
        }
        catch ( itk::ExceptionObject& ex )
        {
            throw gcnew itkExceptionObject( ex.GetDescription(), ex.GetLocation(), ex.GetFile(), ex.GetLine() );
        }
    }

    ///<summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
    virtual String^ ToString ( ) override
    {
        std::stringstream ss;
        m_PointerToNative->Print( ss );
        std::string s = ss.str();
        return gcnew String( s.c_str() );
    }

    ///<summary>
    ///Remove all observers watching this object.
    ///</summary>
    ///<remarks>
    ///By default, observers are created for all events. Calling this
    ///method removes all native observers, and therefore prevents
    ///the firing of managed events. Call AddAnyEventObserver() to
    ///reset the default observers which enable the managed events.
    ///</remarks>
    virtual void RemoveAllObservers ( ) override
    {
        this->m_PointerToNative->RemoveAllObservers();
    }

    ///<summary>
    ///Adds a native observer watching for any event.
    ///</summary>
    ///<remarks>
    ///By default, observers are created for all events. Calling this
    ///method adds a single native observer for any event. This
    ///observer invokes the managed events. Therefore, calling this
    ///method more than once, or calling it without first calling
    ///RemoveAllObservers(), may cause the managed events to be
    ///invoked more than once.
    ///</remarks>
    virtual void AddAnyEventObserver ( ) override
    {
        itk::itkObjectCommand::Pointer observer = itk::itkObjectCommand::New();
        observer->SetManagedObject( this );
        this->m_PointerToNative->AddObserver( itk::AnyEvent(), observer );
    }

    ///<summary>Separate this path from the pipeline.</summary>
    ///<remarks>
    ///This method disconnects the path from the upstream pipeline.
    ///Hence an Update() from downstream will not propagate back past this path.
    ///To completely isolate this path from the pipeline, the application must
    ///remove this path from any filters which it is connected as the input.
    ///</remarks>
    virtual void DisconnectPipeline ( ) override
    {
        try
        {
            this->m_PointerToNative->DisconnectPipeline();
        }
        catch ( itk::ExceptionObject& ex )
        {
            throw gcnew itkExceptionObject( ex.GetDescription(), ex.GetLocation(), ex.GetFile(), ex.GetLine() );
        }
    }

    ///<summary>Get the number of points comprising this set.</summary>
    property unsigned long NumberOfPoints
    {
      virtual unsigned long get( ) override { return m_PointerToNative->GetNumberOfPoints(); }
    }

    ///<summary>Get the number of cells comprising this mesh.</summary>
    property unsigned long NumberOfCells
    {
      virtual unsigned long get( ) override { return m_PointerToNative->GetNumberOfCells(); }
    }

    ///<summary>Return the pointer to the native PointsContainer.</summary>
    virtual IntPtr GetPoints( ) override
    {
        return static_cast<IntPtr>( m_PointerToNative->GetPoints() );
    }

    ///<summary>Return a managed array of points.</summary>
    ///<remarks>This method steps through the points array and duplicates each point in to managed memory. It operates irrespective of the mesh traits.</remarks>
    virtual array<itkPoint^>^ GetPointsAsArray( ) override
    {
        // Create the array
        unsigned int numPoints = this->m_PointerToNative->GetNumberOfPoints( );
        array<itkPoint^>^ result = gcnew array<itkPoint^>( numPoints );
        unsigned int i = 0;

        // Step through unmanaged array
        NativeType::PointsContainerPointer points = this->m_PointerToNative->GetPoints( );
        NativeType::PointsContainerConstIterator it = points->Begin();
        NativeType::PointsContainerConstIterator itEnd = points->End();
        while ( it != itEnd )
        {
            result[i++] = ManagedTypes::ToManagedPoint< NativeType::PointDimension >( it.Value() );
            ++it;
        }

        // Return
        return result;
    }

    ///<summary>Copy the array of points from the mesh to the given memory location.</summary>
    ///<param name="arrayptr">The memory location to write the points. It is the caller's responsiblity to ensure enough memory has been allocated.</param>
    virtual void GetPointsAsArray( IntPtr arrayptr ) override
    {
        // Cast input to array of points
        NativeType::PointType::ValueType* array = (NativeType::PointType::ValueType*)arrayptr.ToPointer();
        unsigned int i = 0;

        // Step through unmanaged array
        NativeType::PointsContainerPointer points = this->m_PointerToNative->GetPoints( );
        NativeType::PointsContainerConstIterator it = points->Begin();
        NativeType::PointsContainerConstIterator itEnd = points->End();
        while ( it != itEnd )
        {
            NativeType::PointType point = it.Value();
            for (unsigned int j=0; j<NativeType::PointDimension; j++)
            {
                array[i++] = point[j];
            }
            ++it;
        }
    }

    ///<summary>Set the array of points from the given managed array.</summary>
    ///<param name="array">The managed array of points to add to the point set.</param>
    virtual void SetPointsAsArray( array<itkPoint^>^ array ) override
    {
        // Set the points
        for( unsigned int i = 0; i < array->Length; i++ )
        {
            NativeType::PointType p;
            for ( unsigned int d = 0; d < NativeType::PointDimension; d++ )
            {
                p[d] = array[i][d];
            }
            this->m_PointerToNative->SetPoint( i, p );
        }
    }

    ///<summary>Set the array of points from the given memory location.</summary>
    ///<param name="numberOfPoints">The number of points in the array. The array will have (numberOfPoints * PointDimension) values.</param>
    ///<param name="arrayptr">The memory location to read the points. It is the caller's responsiblity to ensure the array has the correct number of values.</param>
    virtual void SetPointsAsArray( unsigned int numberOfPoints, IntPtr arrayptr ) override
    {
        // Cast input to array of points
        NativeType::PointType::ValueType* array = (NativeType::PointType::ValueType*)arrayptr.ToPointer();

        // Set the points
        for( unsigned int i = 0; i < numberOfPoints; i++ )
        {
            NativeType::PointType p;
            for ( unsigned int d = 0; d < NativeType::PointDimension; d++ )
            {
                p[d] = array[i*NativeType::PointDimension + d];
            }
            this->m_PointerToNative->SetPoint( i, p );
        }
    }

    ///<summary>Return the pointer to the native CellsContainerPointer.</summary>
    virtual IntPtr GetCells( ) override
    {
        return static_cast<IntPtr>( (NativeType::CellsContainer*)m_PointerToNative->GetCells() );
    }

    ///<summary>Return a managed array of cells.</summary>
    ///<remarks>This method steps through the cell array and duplicates each index in to managed memory. It operates irrespective of the mesh traits.</remarks>
    virtual array<itkCell^>^ GetCellsAsArray( ) override
    {
        // Create the array
        unsigned int numCells = this->m_PointerToNative->GetNumberOfCells( );
        array<itkCell^>^ result = gcnew array<itkCell^>( numCells );
        unsigned int i = 0;

        // Step through unmanaged array
        NativeType::CellsContainerPointer cells = this->m_PointerToNative->GetCells( );
        NativeType::CellsContainerConstIterator it = cells->Begin();
        NativeType::CellsContainerConstIterator itEnd = cells->End();
        while ( it != itEnd )
        {
            result[i++] = ManagedTypes::ToManagedCell< NativeType::PixelType, NativeType::CellTraits >( it.Value() );
            ++it;
        }

        // Return
        return result;
    }

    ///<summary>Copy the array of cell indicies to the given memory location. For this method to be useful, all cells must have the same number of points (ie. all LINE_CELL, all TRIANGLE_CELL, etc).</summary>
    ///<param name="arrayptr">The memory location to write the cell indices. It is the caller's responsiblity to ensure enough memory has been allocated.</param>
    virtual void GetCellIndicesAsArray( IntPtr arrayptr ) override
    {
        // Cast input to array of points
        NativeType::CellIdentifier* array = (NativeType::CellIdentifier*)arrayptr.ToPointer();
        unsigned int i = 0;

        // Step through unmanaged array
        NativeType::CellsContainerPointer cells = this->m_PointerToNative->GetCells( );
        NativeType::CellsContainerConstIterator itCells = cells->Begin();
        NativeType::CellsContainerConstIterator itEndCells = cells->End();
        while ( itCells != itEndCells )
        {
            NativeType::CellType::PointIdConstIterator itIndices = itCells.Value()->PointIdsBegin();
            NativeType::CellType::PointIdConstIterator itIndicesEnd = itCells.Value()->PointIdsEnd();
            while( itIndices != itIndicesEnd )
            {
                array[i++] = *itIndices;
                ++itIndices;
            }
            ++itCells;
        }
    }

    ///<summary>Set the cells from the given memory location. This method only creates meshes with homogenuous cells (ie. all cells are the same).</summary>
    ///<param name="numberOfCells">The number of cells in the array. The array will have (numberOfCells * NumberOfPoints in cell) values.</param>
    ///<param name="arrayptr">The memory location to read the cells. It is the caller's responsiblity to ensure the array has the correct number of values.</param>
    virtual void SetCellIndicesAsArray( unsigned int numberOfCells, itkCellTypeEnum cellType, IntPtr arrayptr ) override
    {
        // Cast input to array of points
        NativeType::CellIdentifier* array = (NativeType::CellIdentifier*)arrayptr.ToPointer();
        unsigned int i = 0;

        // Do for each cell
        for (unsigned int c = 0; c < numberOfCells; c++ )
        {
            typedef NativeType::CellType::CellAutoPointer CellAutoPointer;
            CellAutoPointer cell;

            switch (cellType) {
                case itkCellTypeEnum::VertexCellType:
                    typedef itk::VertexCell< NativeType::CellType > VertexCellType;
                    cell.TakeOwnership( new VertexCellType );
                    cell->SetPointId( 0, array[i++] );
                    m_PointerToNative->SetCell( c, cell );
                    break;
                case itkCellTypeEnum::LineCellType:
                    typedef itk::LineCell< NativeType::CellType > LineCellType;
                    cell.TakeOwnership( new LineCellType );
                    cell->SetPointId( 0, array[i++] );
                    cell->SetPointId( 1, array[i++] );
                    m_PointerToNative->SetCell( c, cell );
                    break;
                case itkCellTypeEnum::TriangleCellType:
                    typedef itk::TriangleCell< NativeType::CellType > TriangleCellType;
                    cell.TakeOwnership( new TriangleCellType );
                    cell->SetPointId( 0, array[i++] );
                    cell->SetPointId( 1, array[i++] );
                    cell->SetPointId( 2, array[i++] );
                    m_PointerToNative->SetCell( c, cell );
                    break;
                default:
                    throw gcnew NotImplementedException("Support for the given cell type is not yet implemented.");
            }
        }
    }
    @MANAGED_PROPERTIES_TYPE@ @MANAGED_METHODS_TYPE@

}; // end ref class

} // end namespace itk

#endif
