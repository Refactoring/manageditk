/*=============================================================================

  NOTE: THIS FILE WAS AUTOMATICALLY GENERATED BY THE ManagedITK PROJECT.

  Project:   ManagedITK
  Program:   Insight Segmentation & Registration Toolkit
  Module:    @NAMESPACE@Managed@MANAGED_BASE_NAME@_@MANGLED_SUFFIX@.cxx
  Language:  C++/CLI
  Author:    Dan Mueller
  Date:      $Date$
  Revision:  $Revision$

  Portions of this code are covered under the ITK and VTK copyright.
  See http://www.itk.org/HTML/Copyright.htm for details.
  See http://www.vtk.org/copyright.php for details.

  Copyright (c) 2008 Dan Mueller

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  THE SOFTWARE.
  
=============================================================================*/

#pragma once
#pragma warning( disable : 4635 ) // Disable warnings about XML doc comments

#ifndef __@NAMESPACE@Managed@MANAGED_BASE_NAME@_@MANGLED_SUFFIX@_cxx
#define __@NAMESPACE@Managed@MANAGED_BASE_NAME@_@MANGLED_SUFFIX@_cxx

// Include some useful ITK headers
#pragma unmanaged
#include "itkMesh.h"
#include "itkExceptionObject.h"
#include "itkProcessObject.h"
#include "itkMeshToMeshFilter.h"
@MANAGED_INCLUDE_TYPE@

// Include some useful ManagedITK files
#pragma managed
#include "itkManagedTypes.cxx"
#include "itkManagedObjectAutoPtr.cxx"
#include "itkManagedProcessObjectCommand.cxx"
#include "@NAMESPACE@Managed@MANAGED_BASE_NAME@.cxx"

// Use some managed namespaces
#using <mscorlib.dll>
#using <System.dll>
#using <@MANAGED_ITK_ASSEMBLY_PREFIX@.Common.dll>
using namespace System;
using namespace System::IO;
using namespace System::Reflection;
using namespace System::ComponentModel;
using namespace System::Diagnostics;

// Some other necessary includes
namespace @NAMESPACE@
{

@MANAGED_EXTRA_TYPE@

///<summary>
///This class is a managed type instance for @NAMESPACE@::@MANAGED_BASE_NAME@ .
///</summary>
public ref class @NAMESPACE@@MANAGED_BASE_NAME@_@MANGLED_SUFFIX@ :
    itk::itkMeshToMeshFilter, I@MANAGED_BASE_NAME@
{
private:
    // Native type
    typedef @MANAGED_CLASS@ < @TEMPLATE_PARAMS@ > NativeType;
    itk::itkObjectAutoPtr<NativeType> m_PointerToNative;

    // Useful typedefs
    typedef NativeType::OutputMeshType OutputMeshType;
    typedef NativeType::InputMeshType InputMeshType;

protected:
    ///<summary>Protected constructor.</summary>
    @NAMESPACE@@MANAGED_BASE_NAME@_@MANGLED_SUFFIX@ ( ) : itk::itkMeshToMeshFilter( "@MANAGED_BASE_NAME@" )
    {
        this->m_PointerToNative.Reset();
        this->m_IsDisposed = false;
        this->m_MangledTypeString = "@MANGLED_SUFFIX@";
    }

public:
    ///<summary>Dispose of the managed object.</summary>
    ~@NAMESPACE@@MANAGED_BASE_NAME@_@MANGLED_SUFFIX@ ( )
    {
        if (!this->IsDisposed)
        {
            this->m_IsDisposed = true;
            this->m_PointerToNative.Reset();
        }
    }
    
    ///<summary>Finalize the managed object.</summary>
    !@NAMESPACE@@MANAGED_BASE_NAME@_@MANGLED_SUFFIX@ ( )
    {
        if (!this->IsDisposed && this->DisposeNativeObjectOnFinalize)
            delete this;
    }

    ///<summary>
    ///Get/set the pointer to the native ITK object associated with
    ///this wrapper instance.
    ///</summary>
    ///<returns>The pointer to the native ITK object.</returns>
    property IntPtr NativePointer
    {
        virtual IntPtr get() override { return IntPtr(this->m_PointerToNative.Get()); }
        virtual void set ( IntPtr value ) override 
        {
            this->m_PointerToNative.Reset( (NativeType*)value.ToPointer() );
        }
    }
    
    ///<summary>Get the last modified time.</summary>
    property unsigned long MTime 
    { 
        virtual unsigned long get() override { return this->m_PointerToNative->GetMTime(); }
    }
    
    ///<summary>
    ///Get the size of the input array. This is merely the size of the input array,
    ///not the number of inputs that have valid DataObject's assigned.
    ///</summary>
    ///<remarks>Use NumberOfValidRequiredInputs to determine how many inputs are non-null.</remarks>
    property unsigned int NumberOfInputs 
    {
        virtual unsigned int get() override { return this->m_PointerToNative->GetNumberOfInputs(); }
    }

    ///<summary>
    ///Get the number of valid inputs.  This is the number of non-null entries in the
    ///input array in the first NumberOfRequiredInputs slots. This method is used
    ///to determine whether the necessary required inputs have been set.
    ///</summary>
    property unsigned int NumberOfValidRequiredInputs 
    { 
        virtual unsigned int get() override { return this->m_PointerToNative->GetNumberOfValidRequiredInputs(); }
    }

    ///<summary>Return the length of the output array.</summary>
    property unsigned int NumberOfOutputs
    {
        virtual unsigned int get() override { return this->m_PointerToNative->GetNumberOfOutputs(); }
    }
    
    ///<summary>Get/set the number of threads to create when executing.</summary>
    property unsigned int NumberOfThreads
    {
        virtual unsigned int get() override { return this->m_PointerToNative->GetNumberOfThreads(); }
        virtual void set(unsigned int threads) override { this->m_PointerToNative->SetNumberOfThreads( threads ); }
    }

    ///<summary>Create an instance of the underlying native itk object.</summary>
    static @NAMESPACE@@MANAGED_BASE_NAME@_@MANGLED_SUFFIX@^ New ( )
    {
        try
        {
            // Create a new managed object
            @NAMESPACE@@MANAGED_BASE_NAME@_@MANGLED_SUFFIX@^ newManagedObject = gcnew @NAMESPACE@@MANAGED_BASE_NAME@_@MANGLED_SUFFIX@();
    
            // Create a new native object
            NativeType::Pointer nativeObject = NativeType::New();
            newManagedObject->m_PointerToNative.Reset( nativeObject );
            
            // Add AnyEvent observer
            newManagedObject->AddAnyEventObserver();
    
            // Return
            return newManagedObject;
        }
        catch ( itk::ExceptionObject& ex )
        {
            throw gcnew itkExceptionObject( ex.GetDescription(), ex.GetLocation(), ex.GetFile(), ex.GetLine() );
        }
    }
    
    ///<summary>Return itk::LightObject::Print( ostream ) as a string.</summary>
    virtual String^ ToString ( ) override
    {
        std::stringstream ss;
        m_PointerToNative->Print( ss );
        std::string s = ss.str();
        return gcnew String( s.c_str() );
    }

    ///<summary>
    ///Remove all observers watching this object.
    ///</summary>
    ///<remarks>
    ///By default, observers are created for all events. Calling this
    ///method removes all native observers, and therefore prevents
    ///the firing of managed events. Call AddAnyEventObserver() to
    ///reset the default observers which enable the managed events.
    ///</remarks>
    virtual void RemoveAllObservers ( ) override
    {
        this->m_PointerToNative->RemoveAllObservers();
    }

    ///<summary>
    ///Adds a native observer watching for any event.
    ///</summary>
    ///<remarks>
    ///By default, observers are created for all events. Calling this
    ///method adds a single native observer for any event. This
    ///observer invokes the managed events. Therefore, calling this
    ///method more than once, or calling it without first calling
    ///RemoveAllObservers(), may cause the managed events to be
    ///invoked more than once.
    ///</remarks>
    virtual void AddAnyEventObserver ( ) override
    {
        itk::itkProcessObjectCommand::Pointer observer = itk::itkProcessObjectCommand::New();
        observer->SetManagedObject( this );
        this->m_PointerToNative->AddObserver( itk::AnyEvent(), observer );
    }
    
    ///<summary>
    ///Bring this filter up-to-date.
    ///</summary>
    ///<remarks>
    ///Update() checks modified times against last execution times, and
    ///re-executes objects if necessary. A side effect of this method
    ///ss that the whole pipeline may execute in order to bring this filter
    ///up-to-date. This method updates the currently prescribed requested region.
    ///If no requested region has been set on the output, then the requested
    ///region will be set to the largest possible region. Once the requested
    ///region is set, Update() will make sure the specified requested region 
    ///is up-to-date. To have a filter always to produce its largest possible
    ///region, users should call UpdateLargestPossibleRegion() instead.
    ///</remarks>
    virtual void Update ( ) override
    {
        try
        {
            this->m_PointerToNative->Update();
        }
        catch ( itk::ExceptionObject& ex )
        {
            throw gcnew itkExceptionObject( ex.GetDescription(), ex.GetLocation(), ex.GetFile(), ex.GetLine() );
        }
    }
    
    ///<summary>
    ///Bring the largest possible region of this filter up-to-date.
    ///</summary>
    ///<remarks>
    ///Like Update(), but sets the output requested region to the
    ///largest possible region for the output. This is the method users
    ///should call if they want the entire dataset to be processed. If
    ///a user wants to update the same output region as a previous call
    ///to Update() or a previous call to UpdateLargestPossibleRegion(), 
    ///then they should call the method Update().
    ///</remarks>
    virtual void UpdateLargestPossibleRegion ( ) override
    {
        try
        {
            this->m_PointerToNative->UpdateLargestPossibleRegion();
        }
        catch ( itk::ExceptionObject& ex )
        {
            throw gcnew itkExceptionObject( ex.GetDescription(), ex.GetLocation(), ex.GetFile(), ex.GetLine() );
        }
    }
    
    ///<summary>
    ///Set the AbortGenerateData flag to true, and try to prematurely terminate the process. 
    ///</summary>
    ///<remarks>
    ///Process objects may handle premature termination of execution in different ways.
    ///Eg. many filters totally ignore this flag.
    ///</remarks>
    virtual void AbortGenerateData( ) override
    {
        try
        {
            this->m_PointerToNative->AbortGenerateDataOn();
        }
        catch ( itk::ExceptionObject& ex )
        {
            throw gcnew itkExceptionObject( ex.GetDescription(), ex.GetLocation(), ex.GetFile(), ex.GetLine() );
        }
    }

    ///<summary>Get the specified output.</summary>
    ///<param name="output">The itkMeshBase to make as the output.</param>
    virtual void GetOutput ( unsigned int index, itk::itkMeshBase^ output ) override
    {
        output->NativePointer = IntPtr((OutputMeshType*)this->m_PointerToNative->GetOutput(index));
    }

    ///<summary>Get the first output.</summary>
    ///<param name="output">The itkMeshBase to make as the output.</param>
    virtual void GetOutput ( itk::itkMeshBase^ output ) override
    {
        output->NativePointer = IntPtr((OutputMeshType*)this->m_PointerToNative->GetOutput());
    }

    ///<summary>Get the specified output as a IntPtr.</summary>
    ///<returns>The output as an IntPtr.</param>
    virtual IntPtr GetOutput( unsigned int index ) override
    {
        // Call GetOutput on the filter
        return IntPtr((OutputMeshType*)this->m_PointerToNative->GetOutput(index));
    }

    ///<summary>Get the first output as an IntPtr.</summary>
    ///<returns>The output as an IntPtr.</param>
    virtual IntPtr GetOutput( ) override
    {
        // Call GetOutput on the filter
        return IntPtr((OutputMeshType*)this->m_PointerToNative->GetOutput());
    }
        ///<summary>Set the first input of the filter object.</summary>
    ///<param name="input">The input as an itkMeshBase.</param>
	virtual void SetInput(itkMeshBase^ input) override
	{
        this->m_PointerToNative->SetInput( reinterpret_cast<InputMeshType*>(input->NativePointer.ToPointer()) );
    }

    ///<summary>Set the first input of the filter object.</summary>
    ///<param name="itkMeshPtr">The input as an IntPtr.</param>
    virtual void SetInput( IntPtr itkMeshPtr ) override
    {
        this->m_PointerToNative->SetInput( (NativeType::InputMeshType*)itkMeshPtr.ToPointer() );
    }
    
    ///<summary>Get the first input of the filter object.</summary>
    ///<returns>The input as an IntPtr.</returns>
    virtual IntPtr GetInput( ) override
    {
        return IntPtr((InputMeshType*)this->m_PointerToNative->GetInput());
    }

    ///<summary>Get the first input of the filter object.</summary>
    ///<param name="input">The itkMeshBase to populate with the first input.</param>
    virtual void GetInput( itkMeshBase^ input ) override
    {
        input->NativePointer = IntPtr((InputMeshType*)this->m_PointerToNative->GetInput());
    }
    @MANAGED_PROPERTIES_TYPE@ @MANAGED_METHODS_TYPE@

}; // end ref class

} // end namespace @NAMESPACE@

#endif